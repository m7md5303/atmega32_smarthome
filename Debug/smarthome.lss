
smarthome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000156  00800060  000024d4  00002548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c98  00000000  00000000  000026a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d04  00000000  00000000  00004338  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  000051dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240c  00000000  00000000  000053cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001377  00000000  00000000  000077d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d8  00000000  00000000  00008b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00009d28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  00009ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  0000a1db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000aba9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <main>
      7a:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e9       	ldi	r26, 0x9D	; 157
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d e9       	ldi	r24, 0x9D	; 157
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6d e9       	ldi	r22, 0x9D	; 157
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 41 12 	jmp	0x2482	; 0x2482 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <__epilogue_restores__+0x20>

000009fe <__clzsi2>:
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	7b 01       	movw	r14, r22
     a08:	8c 01       	movw	r16, r24
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	e8 16       	cp	r14, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	f8 06       	cpc	r15, r24
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 07       	cpc	r16, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	18 07       	cpc	r17, r24
     a1a:	88 f4       	brcc	.+34     	; 0xa3e <__clzsi2+0x40>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	e8 16       	cp	r14, r24
     a20:	f1 04       	cpc	r15, r1
     a22:	01 05       	cpc	r16, r1
     a24:	11 05       	cpc	r17, r1
     a26:	31 f0       	breq	.+12     	; 0xa34 <__clzsi2+0x36>
     a28:	28 f0       	brcs	.+10     	; 0xa34 <__clzsi2+0x36>
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	17 c0       	rjmp	.+46     	; 0xa62 <__clzsi2+0x64>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	e8 16       	cp	r14, r24
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	f8 06       	cpc	r15, r24
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 07       	cpc	r16, r24
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	18 07       	cpc	r17, r24
     a4e:	28 f0       	brcs	.+10     	; 0xa5a <__clzsi2+0x5c>
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x64>
     a5a:	80 e1       	ldi	r24, 0x10	; 16
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	20 e2       	ldi	r18, 0x20	; 32
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	28 1b       	sub	r18, r24
     a6c:	39 0b       	sbc	r19, r25
     a6e:	4a 0b       	sbc	r20, r26
     a70:	5b 0b       	sbc	r21, r27
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__clzsi2+0x7e>
     a74:	16 95       	lsr	r17
     a76:	07 95       	ror	r16
     a78:	f7 94       	ror	r15
     a7a:	e7 94       	ror	r14
     a7c:	8a 95       	dec	r24
     a7e:	d2 f7       	brpl	.-12     	; 0xa74 <__clzsi2+0x76>
     a80:	f7 01       	movw	r30, r14
     a82:	eb 55       	subi	r30, 0x5B	; 91
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	80 81       	ld	r24, Z
     a88:	28 1b       	sub	r18, r24
     a8a:	31 09       	sbc	r19, r1
     a8c:	41 09       	sbc	r20, r1
     a8e:	51 09       	sbc	r21, r1
     a90:	c9 01       	movw	r24, r18
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	08 95       	ret

00000a9c <__pack_f>:
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	fc 01       	movw	r30, r24
     aa8:	e4 80       	ldd	r14, Z+4	; 0x04
     aaa:	f5 80       	ldd	r15, Z+5	; 0x05
     aac:	06 81       	ldd	r16, Z+6	; 0x06
     aae:	17 81       	ldd	r17, Z+7	; 0x07
     ab0:	d1 80       	ldd	r13, Z+1	; 0x01
     ab2:	80 81       	ld	r24, Z
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	48 f4       	brcc	.+18     	; 0xaca <__pack_f+0x2e>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a0 e1       	ldi	r26, 0x10	; 16
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e8 2a       	or	r14, r24
     ac2:	f9 2a       	or	r15, r25
     ac4:	0a 2b       	or	r16, r26
     ac6:	1b 2b       	or	r17, r27
     ac8:	a5 c0       	rjmp	.+330    	; 0xc14 <__pack_f+0x178>
     aca:	84 30       	cpi	r24, 0x04	; 4
     acc:	09 f4       	brne	.+2      	; 0xad0 <__pack_f+0x34>
     ace:	9f c0       	rjmp	.+318    	; 0xc0e <__pack_f+0x172>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	21 f4       	brne	.+8      	; 0xadc <__pack_f+0x40>
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <__pack_f+0x4a>
     adc:	e1 14       	cp	r14, r1
     ade:	f1 04       	cpc	r15, r1
     ae0:	01 05       	cpc	r16, r1
     ae2:	11 05       	cpc	r17, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__pack_f+0x50>
     ae6:	e0 e0       	ldi	r30, 0x00	; 0
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	96 c0       	rjmp	.+300    	; 0xc18 <__pack_f+0x17c>
     aec:	62 81       	ldd	r22, Z+2	; 0x02
     aee:	73 81       	ldd	r23, Z+3	; 0x03
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	62 38       	cpi	r22, 0x82	; 130
     af4:	79 07       	cpc	r23, r25
     af6:	0c f0       	brlt	.+2      	; 0xafa <__pack_f+0x5e>
     af8:	5b c0       	rjmp	.+182    	; 0xbb0 <__pack_f+0x114>
     afa:	22 e8       	ldi	r18, 0x82	; 130
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	26 1b       	sub	r18, r22
     b00:	37 0b       	sbc	r19, r23
     b02:	2a 31       	cpi	r18, 0x1A	; 26
     b04:	31 05       	cpc	r19, r1
     b06:	2c f0       	brlt	.+10     	; 0xb12 <__pack_f+0x76>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	2a c0       	rjmp	.+84     	; 0xb66 <__pack_f+0xca>
     b12:	b8 01       	movw	r22, r16
     b14:	a7 01       	movw	r20, r14
     b16:	02 2e       	mov	r0, r18
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__pack_f+0x86>
     b1a:	76 95       	lsr	r23
     b1c:	67 95       	ror	r22
     b1e:	57 95       	ror	r21
     b20:	47 95       	ror	r20
     b22:	0a 94       	dec	r0
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__pack_f+0x7e>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x9c>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	aa 1f       	adc	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	2a 95       	dec	r18
     b3a:	d2 f7       	brpl	.-12     	; 0xb30 <__pack_f+0x94>
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	a1 09       	sbc	r26, r1
     b40:	b1 09       	sbc	r27, r1
     b42:	8e 21       	and	r24, r14
     b44:	9f 21       	and	r25, r15
     b46:	a0 23       	and	r26, r16
     b48:	b1 23       	and	r27, r17
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a1 05       	cpc	r26, r1
     b4e:	b1 05       	cpc	r27, r1
     b50:	21 f0       	breq	.+8      	; 0xb5a <__pack_f+0xbe>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	9a 01       	movw	r18, r20
     b5c:	ab 01       	movw	r20, r22
     b5e:	28 2b       	or	r18, r24
     b60:	39 2b       	or	r19, r25
     b62:	4a 2b       	or	r20, r26
     b64:	5b 2b       	or	r21, r27
     b66:	da 01       	movw	r26, r20
     b68:	c9 01       	movw	r24, r18
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0xee>
     b7c:	27 ff       	sbrs	r18, 7
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <__pack_f+0xf6>
     b80:	20 5c       	subi	r18, 0xC0	; 192
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	4f 4f       	sbci	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0xf6>
     b8a:	21 5c       	subi	r18, 0xC1	; 193
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	e0 e0       	ldi	r30, 0x00	; 0
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	20 30       	cpi	r18, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	3a 07       	cpc	r19, r26
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	4a 07       	cpc	r20, r26
     ba0:	a0 e4       	ldi	r26, 0x40	; 64
     ba2:	5a 07       	cpc	r21, r26
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <__pack_f+0x10e>
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	79 01       	movw	r14, r18
     bac:	8a 01       	movw	r16, r20
     bae:	27 c0       	rjmp	.+78     	; 0xbfe <__pack_f+0x162>
     bb0:	60 38       	cpi	r22, 0x80	; 128
     bb2:	71 05       	cpc	r23, r1
     bb4:	64 f5       	brge	.+88     	; 0xc0e <__pack_f+0x172>
     bb6:	fb 01       	movw	r30, r22
     bb8:	e1 58       	subi	r30, 0x81	; 129
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	d8 01       	movw	r26, r16
     bbe:	c7 01       	movw	r24, r14
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	a0 70       	andi	r26, 0x00	; 0
     bc6:	b0 70       	andi	r27, 0x00	; 0
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	91 05       	cpc	r25, r1
     bcc:	a1 05       	cpc	r26, r1
     bce:	b1 05       	cpc	r27, r1
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__pack_f+0x144>
     bd2:	e7 fe       	sbrs	r14, 7
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__pack_f+0x154>
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__pack_f+0x14c>
     be0:	8f e3       	ldi	r24, 0x3F	; 63
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e8 0e       	add	r14, r24
     bea:	f9 1e       	adc	r15, r25
     bec:	0a 1f       	adc	r16, r26
     bee:	1b 1f       	adc	r17, r27
     bf0:	17 ff       	sbrs	r17, 7
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x162>
     bf4:	16 95       	lsr	r17
     bf6:	07 95       	ror	r16
     bf8:	f7 94       	ror	r15
     bfa:	e7 94       	ror	r14
     bfc:	31 96       	adiw	r30, 0x01	; 1
     bfe:	87 e0       	ldi	r24, 0x07	; 7
     c00:	16 95       	lsr	r17
     c02:	07 95       	ror	r16
     c04:	f7 94       	ror	r15
     c06:	e7 94       	ror	r14
     c08:	8a 95       	dec	r24
     c0a:	d1 f7       	brne	.-12     	; 0xc00 <__pack_f+0x164>
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__pack_f+0x17c>
     c0e:	ee 24       	eor	r14, r14
     c10:	ff 24       	eor	r15, r15
     c12:	87 01       	movw	r16, r14
     c14:	ef ef       	ldi	r30, 0xFF	; 255
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	6e 2f       	mov	r22, r30
     c1a:	67 95       	ror	r22
     c1c:	66 27       	eor	r22, r22
     c1e:	67 95       	ror	r22
     c20:	90 2f       	mov	r25, r16
     c22:	9f 77       	andi	r25, 0x7F	; 127
     c24:	d7 94       	ror	r13
     c26:	dd 24       	eor	r13, r13
     c28:	d7 94       	ror	r13
     c2a:	8e 2f       	mov	r24, r30
     c2c:	86 95       	lsr	r24
     c2e:	49 2f       	mov	r20, r25
     c30:	46 2b       	or	r20, r22
     c32:	58 2f       	mov	r21, r24
     c34:	5d 29       	or	r21, r13
     c36:	b7 01       	movw	r22, r14
     c38:	ca 01       	movw	r24, r20
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	08 95       	ret

00000c46 <__unpack_f>:
     c46:	fc 01       	movw	r30, r24
     c48:	db 01       	movw	r26, r22
     c4a:	40 81       	ld	r20, Z
     c4c:	51 81       	ldd	r21, Z+1	; 0x01
     c4e:	22 81       	ldd	r18, Z+2	; 0x02
     c50:	62 2f       	mov	r22, r18
     c52:	6f 77       	andi	r22, 0x7F	; 127
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	22 1f       	adc	r18, r18
     c58:	22 27       	eor	r18, r18
     c5a:	22 1f       	adc	r18, r18
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	89 2f       	mov	r24, r25
     c60:	88 0f       	add	r24, r24
     c62:	82 2b       	or	r24, r18
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	99 1f       	adc	r25, r25
     c6a:	99 27       	eor	r25, r25
     c6c:	99 1f       	adc	r25, r25
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	9c 93       	st	X, r25
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	21 15       	cp	r18, r1
     c76:	31 05       	cpc	r19, r1
     c78:	a9 f5       	brne	.+106    	; 0xce4 <__unpack_f+0x9e>
     c7a:	41 15       	cp	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	11 f4       	brne	.+4      	; 0xc88 <__unpack_f+0x42>
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	37 c0       	rjmp	.+110    	; 0xcf6 <__unpack_f+0xb0>
     c88:	82 e8       	ldi	r24, 0x82	; 130
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	9c 93       	st	X, r25
     c90:	8e 93       	st	-X, r24
     c92:	12 97       	sbiw	r26, 0x02	; 2
     c94:	9a 01       	movw	r18, r20
     c96:	ab 01       	movw	r20, r22
     c98:	67 e0       	ldi	r22, 0x07	; 7
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	44 1f       	adc	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	6a 95       	dec	r22
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <__unpack_f+0x54>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	8c 93       	st	X, r24
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <__unpack_f+0x80>
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	44 1f       	adc	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	13 97       	sbiw	r26, 0x03	; 3
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	13 96       	adiw	r26, 0x03	; 3
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	12 97       	sbiw	r26, 0x02	; 2
     cc6:	20 30       	cpi	r18, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	38 07       	cpc	r19, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	48 07       	cpc	r20, r24
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	58 07       	cpc	r21, r24
     cd4:	58 f3       	brcs	.-42     	; 0xcac <__unpack_f+0x66>
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	2d 93       	st	X+, r18
     cda:	3d 93       	st	X+, r19
     cdc:	4d 93       	st	X+, r20
     cde:	5c 93       	st	X, r21
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret
     ce4:	2f 3f       	cpi	r18, 0xFF	; 255
     ce6:	31 05       	cpc	r19, r1
     ce8:	79 f4       	brne	.+30     	; 0xd08 <__unpack_f+0xc2>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	19 f4       	brne	.+6      	; 0xcfa <__unpack_f+0xb4>
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
     cf8:	08 95       	ret
     cfa:	64 ff       	sbrs	r22, 4
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__unpack_f+0xbe>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	8c 93       	st	X, r24
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <__unpack_f+0xe2>
     d04:	1c 92       	st	X, r1
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <__unpack_f+0xe2>
     d08:	2f 57       	subi	r18, 0x7F	; 127
     d0a:	30 40       	sbci	r19, 0x00	; 0
     d0c:	13 96       	adiw	r26, 0x03	; 3
     d0e:	3c 93       	st	X, r19
     d10:	2e 93       	st	-X, r18
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	8c 93       	st	X, r24
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	44 0f       	add	r20, r20
     d1c:	55 1f       	adc	r21, r21
     d1e:	66 1f       	adc	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	8a 95       	dec	r24
     d24:	d1 f7       	brne	.-12     	; 0xd1a <__unpack_f+0xd4>
     d26:	70 64       	ori	r23, 0x40	; 64
     d28:	14 96       	adiw	r26, 0x04	; 4
     d2a:	4d 93       	st	X+, r20
     d2c:	5d 93       	st	X+, r21
     d2e:	6d 93       	st	X+, r22
     d30:	7c 93       	st	X, r23
     d32:	17 97       	sbiw	r26, 0x07	; 7
     d34:	08 95       	ret

00000d36 <__fpcmp_parts_f>:
     d36:	1f 93       	push	r17
     d38:	dc 01       	movw	r26, r24
     d3a:	fb 01       	movw	r30, r22
     d3c:	9c 91       	ld	r25, X
     d3e:	92 30       	cpi	r25, 0x02	; 2
     d40:	08 f4       	brcc	.+2      	; 0xd44 <__fpcmp_parts_f+0xe>
     d42:	47 c0       	rjmp	.+142    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d44:	80 81       	ld	r24, Z
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	08 f4       	brcc	.+2      	; 0xd4c <__fpcmp_parts_f+0x16>
     d4a:	43 c0       	rjmp	.+134    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d4c:	94 30       	cpi	r25, 0x04	; 4
     d4e:	51 f4       	brne	.+20     	; 0xd64 <__fpcmp_parts_f+0x2e>
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	1c 91       	ld	r17, X
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	99 f5       	brne	.+102    	; 0xdbe <__fpcmp_parts_f+0x88>
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	68 2f       	mov	r22, r24
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	61 1b       	sub	r22, r17
     d60:	71 09       	sbc	r23, r1
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <__fpcmp_parts_f+0xac>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	21 f0       	breq	.+8      	; 0xd70 <__fpcmp_parts_f+0x3a>
     d68:	92 30       	cpi	r25, 0x02	; 2
     d6a:	31 f4       	brne	.+12     	; 0xd78 <__fpcmp_parts_f+0x42>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	b9 f1       	breq	.+110    	; 0xdde <__fpcmp_parts_f+0xa8>
     d70:	81 81       	ldd	r24, Z+1	; 0x01
     d72:	88 23       	and	r24, r24
     d74:	89 f1       	breq	.+98     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     d76:	2d c0       	rjmp	.+90     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	1c 91       	ld	r17, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	f1 f0       	breq	.+60     	; 0xdbe <__fpcmp_parts_f+0x88>
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	18 17       	cp	r17, r24
     d86:	d9 f4       	brne	.+54     	; 0xdbe <__fpcmp_parts_f+0x88>
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	2d 91       	ld	r18, X+
     d8c:	3c 91       	ld	r19, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	82 17       	cp	r24, r18
     d96:	93 07       	cpc	r25, r19
     d98:	94 f0       	brlt	.+36     	; 0xdbe <__fpcmp_parts_f+0x88>
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	bc f0       	brlt	.+46     	; 0xdce <__fpcmp_parts_f+0x98>
     da0:	14 96       	adiw	r26, 0x04	; 4
     da2:	8d 91       	ld	r24, X+
     da4:	9d 91       	ld	r25, X+
     da6:	0d 90       	ld	r0, X+
     da8:	bc 91       	ld	r27, X
     daa:	a0 2d       	mov	r26, r0
     dac:	24 81       	ldd	r18, Z+4	; 0x04
     dae:	35 81       	ldd	r19, Z+5	; 0x05
     db0:	46 81       	ldd	r20, Z+6	; 0x06
     db2:	57 81       	ldd	r21, Z+7	; 0x07
     db4:	28 17       	cp	r18, r24
     db6:	39 07       	cpc	r19, r25
     db8:	4a 07       	cpc	r20, r26
     dba:	5b 07       	cpc	r21, r27
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <__fpcmp_parts_f+0x8e>
     dbe:	11 23       	and	r17, r17
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	a4 07       	cpc	r26, r20
     dca:	b5 07       	cpc	r27, r21
     dcc:	40 f4       	brcc	.+16     	; 0xdde <__fpcmp_parts_f+0xa8>
     dce:	11 23       	and	r17, r17
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__fpcmp_parts_f+0xac>
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	7f ef       	ldi	r23, 0xFF	; 255
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <__fpcmp_parts_f+0xac>
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	cb 01       	movw	r24, r22
     de4:	1f 91       	pop	r17
     de6:	08 95       	ret

00000de8 <CLCD_voidSendData>:
#include"CLCD_interface.h"
#include"CLCD_private.h"



void CLCD_voidSendData(u8 Copy_u8Data){
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	2f 97       	sbiw	r28, 0x0f	; 15
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	8f 87       	std	Y+15, r24	; 0x0f
	//high to receive data
DIO_voidSetPinValue(CLCD_CTRLPORT,CLCD_RS_PIN ,DIO_u8HIGH);
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	4f ef       	ldi	r20, 0xFF	; 255
     e04:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
    //low to write
DIO_voidSetPinValue(CLCD_CTRLPORT,CLCD_RW_PIN,DIO_u8LOW);
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
    //data received writing
DIO_VoidSetPortValue(CLCD_DATAPORT,Copy_u8Data);
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	6f 85       	ldd	r22, Y+15	; 0x0f
     e16:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <DIO_VoidSetPortValue>
    //enable
DIO_voidSetPinValue(CLCD_CTRLPORT,CLCD_EN_PIN,DIO_u8HIGH);
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	62 e0       	ldi	r22, 0x02	; 2
     e1e:	4f ef       	ldi	r20, 0xFF	; 255
     e20:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	a0 e0       	ldi	r26, 0x00	; 0
     e2a:	b0 e4       	ldi	r27, 0x40	; 64
     e2c:	8b 87       	std	Y+11, r24	; 0x0b
     e2e:	9c 87       	std	Y+12, r25	; 0x0c
     e30:	ad 87       	std	Y+13, r26	; 0x0d
     e32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e34:	6b 85       	ldd	r22, Y+11	; 0x0b
     e36:	7c 85       	ldd	r23, Y+12	; 0x0c
     e38:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	4a ef       	ldi	r20, 0xFA	; 250
     e42:	54 e4       	ldi	r21, 0x44	; 68
     e44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	8f 83       	std	Y+7, r24	; 0x07
     e4e:	98 87       	std	Y+8, r25	; 0x08
     e50:	a9 87       	std	Y+9, r26	; 0x09
     e52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e54:	6f 81       	ldd	r22, Y+7	; 0x07
     e56:	78 85       	ldd	r23, Y+8	; 0x08
     e58:	89 85       	ldd	r24, Y+9	; 0x09
     e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e8       	ldi	r20, 0x80	; 128
     e62:	5f e3       	ldi	r21, 0x3F	; 63
     e64:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e68:	88 23       	and	r24, r24
     e6a:	2c f4       	brge	.+10     	; 0xe76 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	9e 83       	std	Y+6, r25	; 0x06
     e72:	8d 83       	std	Y+5, r24	; 0x05
     e74:	3f c0       	rjmp	.+126    	; 0xef4 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     e76:	6f 81       	ldd	r22, Y+7	; 0x07
     e78:	78 85       	ldd	r23, Y+8	; 0x08
     e7a:	89 85       	ldd	r24, Y+9	; 0x09
     e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	3f ef       	ldi	r19, 0xFF	; 255
     e82:	4f e7       	ldi	r20, 0x7F	; 127
     e84:	57 e4       	ldi	r21, 0x47	; 71
     e86:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e8a:	18 16       	cp	r1, r24
     e8c:	4c f5       	brge	.+82     	; 0xee0 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e90:	7c 85       	ldd	r23, Y+12	; 0x0c
     e92:	8d 85       	ldd	r24, Y+13	; 0x0d
     e94:	9e 85       	ldd	r25, Y+14	; 0x0e
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e2       	ldi	r20, 0x20	; 32
     e9c:	51 e4       	ldi	r21, 0x41	; 65
     e9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	bc 01       	movw	r22, r24
     ea8:	cd 01       	movw	r24, r26
     eaa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	9e 83       	std	Y+6, r25	; 0x06
     eb4:	8d 83       	std	Y+5, r24	; 0x05
     eb6:	0f c0       	rjmp	.+30     	; 0xed6 <CLCD_voidSendData+0xee>
     eb8:	88 ec       	ldi	r24, 0xC8	; 200
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	9c 83       	std	Y+4, r25	; 0x04
     ebe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <CLCD_voidSendData+0xdc>
     ec8:	9c 83       	std	Y+4, r25	; 0x04
     eca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	9e 83       	std	Y+6, r25	; 0x06
     ed4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	69 f7       	brne	.-38     	; 0xeb8 <CLCD_voidSendData+0xd0>
     ede:	14 c0       	rjmp	.+40     	; 0xf08 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee0:	6f 81       	ldd	r22, Y+7	; 0x07
     ee2:	78 85       	ldd	r23, Y+8	; 0x08
     ee4:	89 85       	ldd	r24, Y+9	; 0x09
     ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	9e 83       	std	Y+6, r25	; 0x06
     ef2:	8d 83       	std	Y+5, r24	; 0x05
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <CLCD_voidSendData+0x118>
     f04:	9a 83       	std	Y+2, r25	; 0x02
     f06:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
//disable
DIO_voidSetPinValue(CLCD_CTRLPORT,CLCD_EN_PIN,DIO_u8LOW);
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	62 e0       	ldi	r22, 0x02	; 2
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>

}
     f12:	2f 96       	adiw	r28, 0x0f	; 15
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <CLCD_voidSendCommand>:
void CLCD_voidSendCommand(u8 Copy_u8Command){
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	2f 97       	sbiw	r28, 0x0f	; 15
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	8f 87       	std	Y+15, r24	; 0x0f
	//low to receive command
DIO_voidSetPinValue(CLCD_CTRLPORT,CLCD_RS_PIN ,DIO_u8LOW);
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
    //low to write
DIO_voidSetPinValue(CLCD_CTRLPORT,CLCD_RW_PIN,DIO_u8LOW);
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	40 e0       	ldi	r20, 0x00	; 0
     f4a:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
    //data received writing
DIO_VoidSetPortValue(CLCD_DATAPORT,Copy_u8Command);
     f4e:	83 e0       	ldi	r24, 0x03	; 3
     f50:	6f 85       	ldd	r22, Y+15	; 0x0f
     f52:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <DIO_VoidSetPortValue>
    //enable
DIO_voidSetPinValue(CLCD_CTRLPORT,CLCD_EN_PIN,DIO_u8HIGH);
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	62 e0       	ldi	r22, 0x02	; 2
     f5a:	4f ef       	ldi	r20, 0xFF	; 255
     f5c:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	a0 e0       	ldi	r26, 0x00	; 0
     f66:	b0 e4       	ldi	r27, 0x40	; 64
     f68:	8b 87       	std	Y+11, r24	; 0x0b
     f6a:	9c 87       	std	Y+12, r25	; 0x0c
     f6c:	ad 87       	std	Y+13, r26	; 0x0d
     f6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f70:	6b 85       	ldd	r22, Y+11	; 0x0b
     f72:	7c 85       	ldd	r23, Y+12	; 0x0c
     f74:	8d 85       	ldd	r24, Y+13	; 0x0d
     f76:	9e 85       	ldd	r25, Y+14	; 0x0e
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	4a ef       	ldi	r20, 0xFA	; 250
     f7e:	54 e4       	ldi	r21, 0x44	; 68
     f80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	8f 83       	std	Y+7, r24	; 0x07
     f8a:	98 87       	std	Y+8, r25	; 0x08
     f8c:	a9 87       	std	Y+9, r26	; 0x09
     f8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f90:	6f 81       	ldd	r22, Y+7	; 0x07
     f92:	78 85       	ldd	r23, Y+8	; 0x08
     f94:	89 85       	ldd	r24, Y+9	; 0x09
     f96:	9a 85       	ldd	r25, Y+10	; 0x0a
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e8       	ldi	r20, 0x80	; 128
     f9e:	5f e3       	ldi	r21, 0x3F	; 63
     fa0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     fa4:	88 23       	and	r24, r24
     fa6:	2c f4       	brge	.+10     	; 0xfb2 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9e 83       	std	Y+6, r25	; 0x06
     fae:	8d 83       	std	Y+5, r24	; 0x05
     fb0:	3f c0       	rjmp	.+126    	; 0x1030 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     fb2:	6f 81       	ldd	r22, Y+7	; 0x07
     fb4:	78 85       	ldd	r23, Y+8	; 0x08
     fb6:	89 85       	ldd	r24, Y+9	; 0x09
     fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	3f ef       	ldi	r19, 0xFF	; 255
     fbe:	4f e7       	ldi	r20, 0x7F	; 127
     fc0:	57 e4       	ldi	r21, 0x47	; 71
     fc2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fc6:	18 16       	cp	r1, r24
     fc8:	4c f5       	brge	.+82     	; 0x101c <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fca:	6b 85       	ldd	r22, Y+11	; 0x0b
     fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
     fce:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e2       	ldi	r20, 0x20	; 32
     fd8:	51 e4       	ldi	r21, 0x41	; 65
     fda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	bc 01       	movw	r22, r24
     fe4:	cd 01       	movw	r24, r26
     fe6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	9e 83       	std	Y+6, r25	; 0x06
     ff0:	8d 83       	std	Y+5, r24	; 0x05
     ff2:	0f c0       	rjmp	.+30     	; 0x1012 <CLCD_voidSendCommand+0xee>
     ff4:	88 ec       	ldi	r24, 0xC8	; 200
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	9c 83       	std	Y+4, r25	; 0x04
     ffa:	8b 83       	std	Y+3, r24	; 0x03
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <CLCD_voidSendCommand+0xdc>
    1004:	9c 83       	std	Y+4, r25	; 0x04
    1006:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1008:	8d 81       	ldd	r24, Y+5	; 0x05
    100a:	9e 81       	ldd	r25, Y+6	; 0x06
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	9e 83       	std	Y+6, r25	; 0x06
    1010:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1012:	8d 81       	ldd	r24, Y+5	; 0x05
    1014:	9e 81       	ldd	r25, Y+6	; 0x06
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	69 f7       	brne	.-38     	; 0xff4 <CLCD_voidSendCommand+0xd0>
    101a:	14 c0       	rjmp	.+40     	; 0x1044 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    101c:	6f 81       	ldd	r22, Y+7	; 0x07
    101e:	78 85       	ldd	r23, Y+8	; 0x08
    1020:	89 85       	ldd	r24, Y+9	; 0x09
    1022:	9a 85       	ldd	r25, Y+10	; 0x0a
    1024:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	8d 83       	std	Y+5, r24	; 0x05
    1030:	8d 81       	ldd	r24, Y+5	; 0x05
    1032:	9e 81       	ldd	r25, Y+6	; 0x06
    1034:	9a 83       	std	Y+2, r25	; 0x02
    1036:	89 83       	std	Y+1, r24	; 0x01
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	9a 81       	ldd	r25, Y+2	; 0x02
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <CLCD_voidSendCommand+0x118>
    1040:	9a 83       	std	Y+2, r25	; 0x02
    1042:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
//disable
DIO_voidSetPinValue(CLCD_CTRLPORT,CLCD_EN_PIN,DIO_u8LOW);
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	62 e0       	ldi	r22, 0x02	; 2
    1048:	40 e0       	ldi	r20, 0x00	; 0
    104a:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>

}
    104e:	2f 96       	adiw	r28, 0x0f	; 15
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <CLCD_voidInit>:
void CLCD_voidInit(void){
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	2e 97       	sbiw	r28, 0x0e	; 14
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	ac e1       	ldi	r26, 0x1C	; 28
    107a:	b2 e4       	ldi	r27, 0x42	; 66
    107c:	8b 87       	std	Y+11, r24	; 0x0b
    107e:	9c 87       	std	Y+12, r25	; 0x0c
    1080:	ad 87       	std	Y+13, r26	; 0x0d
    1082:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1084:	6b 85       	ldd	r22, Y+11	; 0x0b
    1086:	7c 85       	ldd	r23, Y+12	; 0x0c
    1088:	8d 85       	ldd	r24, Y+13	; 0x0d
    108a:	9e 85       	ldd	r25, Y+14	; 0x0e
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	4a ef       	ldi	r20, 0xFA	; 250
    1092:	54 e4       	ldi	r21, 0x44	; 68
    1094:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	8f 83       	std	Y+7, r24	; 0x07
    109e:	98 87       	std	Y+8, r25	; 0x08
    10a0:	a9 87       	std	Y+9, r26	; 0x09
    10a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10a4:	6f 81       	ldd	r22, Y+7	; 0x07
    10a6:	78 85       	ldd	r23, Y+8	; 0x08
    10a8:	89 85       	ldd	r24, Y+9	; 0x09
    10aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e8       	ldi	r20, 0x80	; 128
    10b2:	5f e3       	ldi	r21, 0x3F	; 63
    10b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10b8:	88 23       	and	r24, r24
    10ba:	2c f4       	brge	.+10     	; 0x10c6 <CLCD_voidInit+0x66>
		__ticks = 1;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	9e 83       	std	Y+6, r25	; 0x06
    10c2:	8d 83       	std	Y+5, r24	; 0x05
    10c4:	3f c0       	rjmp	.+126    	; 0x1144 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    10c6:	6f 81       	ldd	r22, Y+7	; 0x07
    10c8:	78 85       	ldd	r23, Y+8	; 0x08
    10ca:	89 85       	ldd	r24, Y+9	; 0x09
    10cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	3f ef       	ldi	r19, 0xFF	; 255
    10d2:	4f e7       	ldi	r20, 0x7F	; 127
    10d4:	57 e4       	ldi	r21, 0x47	; 71
    10d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10da:	18 16       	cp	r1, r24
    10dc:	4c f5       	brge	.+82     	; 0x1130 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10de:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e2       	ldi	r20, 0x20	; 32
    10ec:	51 e4       	ldi	r21, 0x41	; 65
    10ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	bc 01       	movw	r22, r24
    10f8:	cd 01       	movw	r24, r26
    10fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	9e 83       	std	Y+6, r25	; 0x06
    1104:	8d 83       	std	Y+5, r24	; 0x05
    1106:	0f c0       	rjmp	.+30     	; 0x1126 <CLCD_voidInit+0xc6>
    1108:	88 ec       	ldi	r24, 0xC8	; 200
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	9c 83       	std	Y+4, r25	; 0x04
    110e:	8b 83       	std	Y+3, r24	; 0x03
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	f1 f7       	brne	.-4      	; 0x1114 <CLCD_voidInit+0xb4>
    1118:	9c 83       	std	Y+4, r25	; 0x04
    111a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111c:	8d 81       	ldd	r24, Y+5	; 0x05
    111e:	9e 81       	ldd	r25, Y+6	; 0x06
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	9e 83       	std	Y+6, r25	; 0x06
    1124:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1126:	8d 81       	ldd	r24, Y+5	; 0x05
    1128:	9e 81       	ldd	r25, Y+6	; 0x06
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	69 f7       	brne	.-38     	; 0x1108 <CLCD_voidInit+0xa8>
    112e:	14 c0       	rjmp	.+40     	; 0x1158 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1130:	6f 81       	ldd	r22, Y+7	; 0x07
    1132:	78 85       	ldd	r23, Y+8	; 0x08
    1134:	89 85       	ldd	r24, Y+9	; 0x09
    1136:	9a 85       	ldd	r25, Y+10	; 0x0a
    1138:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	9e 83       	std	Y+6, r25	; 0x06
    1142:	8d 83       	std	Y+5, r24	; 0x05
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	9e 81       	ldd	r25, Y+6	; 0x06
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <CLCD_voidInit+0xf0>
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(39);
	CLCD_voidSendCommand(0b00111000);
    1158:	88 e3       	ldi	r24, 0x38	; 56
    115a:	0e 94 92 07 	call	0xf24	; 0xf24 <CLCD_voidSendCommand>
    CLCD_voidSendCommand(0b00001111);
    115e:	8f e0       	ldi	r24, 0x0F	; 15
    1160:	0e 94 92 07 	call	0xf24	; 0xf24 <CLCD_voidSendCommand>
    CLCD_voidSendCommand(0b00000001);
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	0e 94 92 07 	call	0xf24	; 0xf24 <CLCD_voidSendCommand>
}
    116a:	2e 96       	adiw	r28, 0x0e	; 14
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <CLCD_voidSendString>:


void CLCD_voidSendString(u8 * Copy_pu8String){
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <CLCD_voidSendString+0x6>
    1182:	0f 92       	push	r0
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	9b 83       	std	Y+3, r25	; 0x03
    118a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    118c:	19 82       	std	Y+1, r1	; 0x01
    118e:	0e c0       	rjmp	.+28     	; 0x11ac <CLCD_voidSendString+0x30>
	while(Copy_pu8String[i]!='\0'){
		CLCD_voidSendData(Copy_pu8String[i]);
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	9b 81       	ldd	r25, Y+3	; 0x03
    119a:	fc 01       	movw	r30, r24
    119c:	e2 0f       	add	r30, r18
    119e:	f3 1f       	adc	r31, r19
    11a0:	80 81       	ld	r24, Z
    11a2:	0e 94 f4 06 	call	0xde8	; 0xde8 <CLCD_voidSendData>
		i=i+1;
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	89 83       	std	Y+1, r24	; 0x01
}


void CLCD_voidSendString(u8 * Copy_pu8String){
	u8 i=0;
	while(Copy_pu8String[i]!='\0'){
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	9b 81       	ldd	r25, Y+3	; 0x03
    11b6:	fc 01       	movw	r30, r24
    11b8:	e2 0f       	add	r30, r18
    11ba:	f3 1f       	adc	r31, r19
    11bc:	80 81       	ld	r24, Z
    11be:	88 23       	and	r24, r24
    11c0:	39 f7       	brne	.-50     	; 0x1190 <CLCD_voidSendString+0x14>
		CLCD_voidSendData(Copy_pu8String[i]);
		i=i+1;
	}
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <CLCD_voidSetXYPosition>:
void CLCD_voidSetXYPosition(u8 Copy_u8XPosition,u8 Copy_u8YPosition)
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <CLCD_voidSetXYPosition+0x6>
    11d4:	0f 92       	push	r0
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	8a 83       	std	Y+2, r24	; 0x02
    11dc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8YPosition==0){
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	88 23       	and	r24, r24
    11e2:	19 f4       	brne	.+6      	; 0x11ea <CLCD_voidSetXYPosition+0x1c>
		Local_u8Address=Copy_u8XPosition;
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	03 c0       	rjmp	.+6      	; 0x11f0 <CLCD_voidSetXYPosition+0x22>
	}
	else{
		Local_u8Address=Copy_u8XPosition+0x40;
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	80 5c       	subi	r24, 0xC0	; 192
    11ee:	89 83       	std	Y+1, r24	; 0x01
	}
	SET_BIT(Local_u8Address,7);
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	80 68       	ori	r24, 0x80	; 128
    11f4:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8Address);
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	0e 94 92 07 	call	0xf24	; 0xf24 <CLCD_voidSendCommand>
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(void){
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(0b00000001);
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	0e 94 92 07 	call	0xf24	; 0xf24 <CLCD_voidSendCommand>
}
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <CLCD_s32AdderPower>:

s32 CLCD_s32AdderPower(u8 Copy_u8Power){
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	29 97       	sbiw	r28, 0x09	; 9
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	8d 83       	std	Y+5, r24	; 0x05
	if(Copy_u8Power==0){
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	88 23       	and	r24, r24
    1236:	49 f4       	brne	.+18     	; 0x124a <CLCD_s32AdderPower+0x2e>
		return 1;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	a0 e0       	ldi	r26, 0x00	; 0
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	8e 83       	std	Y+6, r24	; 0x06
    1242:	9f 83       	std	Y+7, r25	; 0x07
    1244:	a8 87       	std	Y+8, r26	; 0x08
    1246:	b9 87       	std	Y+9, r27	; 0x09
    1248:	1c c0       	rjmp	.+56     	; 0x1282 <CLCD_s32AdderPower+0x66>
	}
	else{
		s32 result= 10* (CLCD_s32AdderPower(Copy_u8Power-1));
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	81 50       	subi	r24, 0x01	; 1
    124e:	0e 94 0e 09 	call	0x121c	; 0x121c <CLCD_s32AdderPower>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	2a e0       	ldi	r18, 0x0A	; 10
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e0       	ldi	r20, 0x00	; 0
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	bc 01       	movw	r22, r24
    1260:	cd 01       	movw	r24, r26
    1262:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__mulsi3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	89 83       	std	Y+1, r24	; 0x01
    126c:	9a 83       	std	Y+2, r25	; 0x02
    126e:	ab 83       	std	Y+3, r26	; 0x03
    1270:	bc 83       	std	Y+4, r27	; 0x04
        return result;
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	9a 81       	ldd	r25, Y+2	; 0x02
    1276:	ab 81       	ldd	r26, Y+3	; 0x03
    1278:	bc 81       	ldd	r27, Y+4	; 0x04
    127a:	8e 83       	std	Y+6, r24	; 0x06
    127c:	9f 83       	std	Y+7, r25	; 0x07
    127e:	a8 87       	std	Y+8, r26	; 0x08
    1280:	b9 87       	std	Y+9, r27	; 0x09
    1282:	8e 81       	ldd	r24, Y+6	; 0x06
    1284:	9f 81       	ldd	r25, Y+7	; 0x07
    1286:	a8 85       	ldd	r26, Y+8	; 0x08
    1288:	b9 85       	ldd	r27, Y+9	; 0x09
	}
}
    128a:	bc 01       	movw	r22, r24
    128c:	cd 01       	movw	r24, r26
    128e:	29 96       	adiw	r28, 0x09	; 9
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <CLCD_s32AdderNegativePower>:
f32 CLCD_s32AdderNegativePower(u8 Copy_u8NegativePower){
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	0f 92       	push	r0
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	89 83       	std	Y+1, r24	; 0x01
		return(1.0/(CLCD_s32AdderPower(Copy_u8NegativePower)));
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	0e 94 0e 09 	call	0x121c	; 0x121c <CLCD_s32AdderPower>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	bc 01       	movw	r22, r24
    12b8:	cd 01       	movw	r24, r26
    12ba:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    12be:	9b 01       	movw	r18, r22
    12c0:	ac 01       	movw	r20, r24
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	80 e8       	ldi	r24, 0x80	; 128
    12c8:	9f e3       	ldi	r25, 0x3F	; 63
    12ca:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
}
    12d2:	bc 01       	movw	r22, r24
    12d4:	cd 01       	movw	r24, r26
    12d6:	0f 90       	pop	r0
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <CLCD_voidWriteInteger>:


void CLCD_voidWriteInteger(u16 Copy_u16Number)
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	60 97       	sbiw	r28, 0x10	; 16
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	98 8b       	std	Y+16, r25	; 0x10
    12f4:	8f 87       	std	Y+15, r24	; 0x0f
	char Local_u8NumberStringArr[10];
	u8 Local_u8Temp , Local_u8ReverseIndex , Local_u8Iterator;
	u8 Local_u8StringIndex=0;
    12f6:	19 82       	std	Y+1, r1	; 0x01
    12f8:	1e c0       	rjmp	.+60     	; 0x1336 <CLCD_voidWriteInteger+0x58>

    /* Saving the Ascii of the integer number in string */
	while(Copy_u16Number>=10)
	{
		Local_u8NumberStringArr[Local_u8StringIndex]=Copy_u16Number%10 + 48;
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	e8 2f       	mov	r30, r24
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	8f 85       	ldd	r24, Y+15	; 0x0f
    1302:	98 89       	ldd	r25, Y+16	; 0x10
    1304:	2a e0       	ldi	r18, 0x0A	; 10
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	b9 01       	movw	r22, r18
    130a:	0e 94 1d 12 	call	0x243a	; 0x243a <__udivmodhi4>
    130e:	28 2f       	mov	r18, r24
    1310:	20 5d       	subi	r18, 0xD0	; 208
    1312:	ce 01       	movw	r24, r28
    1314:	05 96       	adiw	r24, 0x05	; 5
    1316:	e8 0f       	add	r30, r24
    1318:	f9 1f       	adc	r31, r25
    131a:	20 83       	st	Z, r18
		Local_u8StringIndex++;
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	8f 5f       	subi	r24, 0xFF	; 255
    1320:	89 83       	std	Y+1, r24	; 0x01
		Copy_u16Number=Copy_u16Number/10;
    1322:	8f 85       	ldd	r24, Y+15	; 0x0f
    1324:	98 89       	ldd	r25, Y+16	; 0x10
    1326:	2a e0       	ldi	r18, 0x0A	; 10
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	b9 01       	movw	r22, r18
    132c:	0e 94 1d 12 	call	0x243a	; 0x243a <__udivmodhi4>
    1330:	cb 01       	movw	r24, r22
    1332:	98 8b       	std	Y+16, r25	; 0x10
    1334:	8f 87       	std	Y+15, r24	; 0x0f
	char Local_u8NumberStringArr[10];
	u8 Local_u8Temp , Local_u8ReverseIndex , Local_u8Iterator;
	u8 Local_u8StringIndex=0;

    /* Saving the Ascii of the integer number in string */
	while(Copy_u16Number>=10)
    1336:	8f 85       	ldd	r24, Y+15	; 0x0f
    1338:	98 89       	ldd	r25, Y+16	; 0x10
    133a:	8a 30       	cpi	r24, 0x0A	; 10
    133c:	91 05       	cpc	r25, r1
    133e:	e8 f6       	brcc	.-70     	; 0x12fa <CLCD_voidWriteInteger+0x1c>
	{
		Local_u8NumberStringArr[Local_u8StringIndex]=Copy_u16Number%10 + 48;
		Local_u8StringIndex++;
		Copy_u16Number=Copy_u16Number/10;
	}
	Local_u8NumberStringArr[Local_u8StringIndex]=Copy_u16Number+48;
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	8f 85       	ldd	r24, Y+15	; 0x0f
    1348:	48 2f       	mov	r20, r24
    134a:	40 5d       	subi	r20, 0xD0	; 208
    134c:	ce 01       	movw	r24, r28
    134e:	05 96       	adiw	r24, 0x05	; 5
    1350:	fc 01       	movw	r30, r24
    1352:	e2 0f       	add	r30, r18
    1354:	f3 1f       	adc	r31, r19
    1356:	40 83       	st	Z, r20
	Local_u8StringIndex++;
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	8f 5f       	subi	r24, 0xFF	; 255
    135c:	89 83       	std	Y+1, r24	; 0x01

	/* To be String, not Array of characters */
	Local_u8NumberStringArr[Local_u8StringIndex]='\0';
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	ce 01       	movw	r24, r28
    1366:	05 96       	adiw	r24, 0x05	; 5
    1368:	fc 01       	movw	r30, r24
    136a:	e2 0f       	add	r30, r18
    136c:	f3 1f       	adc	r31, r19
    136e:	10 82       	st	Z, r1

    /* Reverse String */
	for (Local_u8ReverseIndex = 0, Local_u8Iterator = Local_u8StringIndex-1; Local_u8ReverseIndex < Local_u8Iterator; Local_u8ReverseIndex++, Local_u8Iterator--)
    1370:	1b 82       	std	Y+3, r1	; 0x03
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	81 50       	subi	r24, 0x01	; 1
    1376:	8a 83       	std	Y+2, r24	; 0x02
    1378:	2c c0       	rjmp	.+88     	; 0x13d2 <CLCD_voidWriteInteger+0xf4>
	{
		Local_u8Temp=Local_u8NumberStringArr[Local_u8ReverseIndex];
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	ce 01       	movw	r24, r28
    1382:	05 96       	adiw	r24, 0x05	; 5
    1384:	fc 01       	movw	r30, r24
    1386:	e2 0f       	add	r30, r18
    1388:	f3 1f       	adc	r31, r19
    138a:	80 81       	ld	r24, Z
    138c:	8c 83       	std	Y+4, r24	; 0x04
	    Local_u8NumberStringArr[Local_u8ReverseIndex]=Local_u8NumberStringArr[Local_u8Iterator];
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	48 2f       	mov	r20, r24
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	ce 01       	movw	r24, r28
    139c:	05 96       	adiw	r24, 0x05	; 5
    139e:	fc 01       	movw	r30, r24
    13a0:	e2 0f       	add	r30, r18
    13a2:	f3 1f       	adc	r31, r19
    13a4:	20 81       	ld	r18, Z
    13a6:	ce 01       	movw	r24, r28
    13a8:	05 96       	adiw	r24, 0x05	; 5
    13aa:	fc 01       	movw	r30, r24
    13ac:	e4 0f       	add	r30, r20
    13ae:	f5 1f       	adc	r31, r21
    13b0:	20 83       	st	Z, r18
	    Local_u8NumberStringArr[Local_u8Iterator]=Local_u8Temp;
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	ce 01       	movw	r24, r28
    13ba:	05 96       	adiw	r24, 0x05	; 5
    13bc:	fc 01       	movw	r30, r24
    13be:	e2 0f       	add	r30, r18
    13c0:	f3 1f       	adc	r31, r19
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
    13c4:	80 83       	st	Z, r24

	/* To be String, not Array of characters */
	Local_u8NumberStringArr[Local_u8StringIndex]='\0';

    /* Reverse String */
	for (Local_u8ReverseIndex = 0, Local_u8Iterator = Local_u8StringIndex-1; Local_u8ReverseIndex < Local_u8Iterator; Local_u8ReverseIndex++, Local_u8Iterator--)
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	8f 5f       	subi	r24, 0xFF	; 255
    13ca:	8b 83       	std	Y+3, r24	; 0x03
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	81 50       	subi	r24, 0x01	; 1
    13d0:	8a 83       	std	Y+2, r24	; 0x02
    13d2:	9b 81       	ldd	r25, Y+3	; 0x03
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	98 17       	cp	r25, r24
    13d8:	80 f2       	brcs	.-96     	; 0x137a <CLCD_voidWriteInteger+0x9c>
	    Local_u8NumberStringArr[Local_u8ReverseIndex]=Local_u8NumberStringArr[Local_u8Iterator];
	    Local_u8NumberStringArr[Local_u8Iterator]=Local_u8Temp;
	}

	/* Display the Integer */
	CLCD_voidSendString(Local_u8NumberStringArr);
    13da:	ce 01       	movw	r24, r28
    13dc:	05 96       	adiw	r24, 0x05	; 5
    13de:	0e 94 be 08 	call	0x117c	; 0x117c <CLCD_voidSendString>
}
    13e2:	60 96       	adiw	r28, 0x10	; 16
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <DC_MOTOR_voidRotateCW>:

#include"DC_ MOTOR_config.h"
#include"DC_MOTOR_private.h"
#include"DC_MOTOR_interface.h"

void DC_MOTOR_voidRotateCW(void){
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
	 DIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN0,DIO_u8HIGH);
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	63 e0       	ldi	r22, 0x03	; 3
    1400:	4f ef       	ldi	r20, 0xFF	; 255
    1402:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
	 DIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN1,DIO_u8LOW);
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	64 e0       	ldi	r22, 0x04	; 4
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
}
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <DC_MOTOR_voidRotateCCW>:
void DC_MOTOR_voidRotateCCW(void){
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
	 DIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN0,DIO_u8LOW);
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	63 e0       	ldi	r22, 0x03	; 3
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
	 DIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN1,DIO_u8HIGH);
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	64 e0       	ldi	r22, 0x04	; 4
    142c:	4f ef       	ldi	r20, 0xFF	; 255
    142e:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
}
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <DC_MOTOR_voidStop>:
void DC_MOTOR_voidStop(void){
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
	 DIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN0,DIO_u8LOW);
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	63 e0       	ldi	r22, 0x03	; 3
    1444:	40 e0       	ldi	r20, 0x00	; 0
    1446:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
	 DIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN1,DIO_u8LOW);
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	64 e0       	ldi	r22, 0x04	; 4
    144e:	40 e0       	ldi	r20, 0x00	; 0
    1450:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
}
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction ){
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	27 97       	sbiw	r28, 0x07	; 7
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	6a 83       	std	Y+2, r22	; 0x02
    1472:	4b 83       	std	Y+3, r20	; 0x03

if(Copy_u8Direction==DIO_u8INPUT){
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	88 23       	and	r24, r24
    1478:	09 f0       	breq	.+2      	; 0x147c <DIO_voidSetPinDirection+0x22>
    147a:	75 c0       	rjmp	.+234    	; 0x1566 <DIO_voidSetPinDirection+0x10c>
	switch(Copy_u8Port){
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	3f 83       	std	Y+7, r19	; 0x07
    1484:	2e 83       	std	Y+6, r18	; 0x06
    1486:	8e 81       	ldd	r24, Y+6	; 0x06
    1488:	9f 81       	ldd	r25, Y+7	; 0x07
    148a:	82 30       	cpi	r24, 0x02	; 2
    148c:	91 05       	cpc	r25, r1
    148e:	61 f1       	breq	.+88     	; 0x14e8 <DIO_voidSetPinDirection+0x8e>
    1490:	2e 81       	ldd	r18, Y+6	; 0x06
    1492:	3f 81       	ldd	r19, Y+7	; 0x07
    1494:	23 30       	cpi	r18, 0x03	; 3
    1496:	31 05       	cpc	r19, r1
    1498:	34 f4       	brge	.+12     	; 0x14a6 <DIO_voidSetPinDirection+0x4c>
    149a:	8e 81       	ldd	r24, Y+6	; 0x06
    149c:	9f 81       	ldd	r25, Y+7	; 0x07
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	91 05       	cpc	r25, r1
    14a2:	69 f0       	breq	.+26     	; 0x14be <DIO_voidSetPinDirection+0x64>
    14a4:	d3 c0       	rjmp	.+422    	; 0x164c <DIO_voidSetPinDirection+0x1f2>
    14a6:	2e 81       	ldd	r18, Y+6	; 0x06
    14a8:	3f 81       	ldd	r19, Y+7	; 0x07
    14aa:	23 30       	cpi	r18, 0x03	; 3
    14ac:	31 05       	cpc	r19, r1
    14ae:	89 f1       	breq	.+98     	; 0x1512 <DIO_voidSetPinDirection+0xb8>
    14b0:	8e 81       	ldd	r24, Y+6	; 0x06
    14b2:	9f 81       	ldd	r25, Y+7	; 0x07
    14b4:	84 30       	cpi	r24, 0x04	; 4
    14b6:	91 05       	cpc	r25, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <DIO_voidSetPinDirection+0x62>
    14ba:	40 c0       	rjmp	.+128    	; 0x153c <DIO_voidSetPinDirection+0xe2>
    14bc:	c7 c0       	rjmp	.+398    	; 0x164c <DIO_voidSetPinDirection+0x1f2>
	case DIO_u8PORTA: CLR_BIT(DDRA , Copy_u8Pin); break;
    14be:	aa e3       	ldi	r26, 0x3A	; 58
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	ea e3       	ldi	r30, 0x3A	; 58
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	48 2f       	mov	r20, r24
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 2e       	mov	r0, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_voidSetPinDirection+0x82>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	0a 94       	dec	r0
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <DIO_voidSetPinDirection+0x7e>
    14e0:	80 95       	com	r24
    14e2:	84 23       	and	r24, r20
    14e4:	8c 93       	st	X, r24
    14e6:	b2 c0       	rjmp	.+356    	; 0x164c <DIO_voidSetPinDirection+0x1f2>
	case DIO_u8PORTB: CLR_BIT(DDRB , Copy_u8Pin); break;
    14e8:	a7 e3       	ldi	r26, 0x37	; 55
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e7 e3       	ldi	r30, 0x37	; 55
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <DIO_voidSetPinDirection+0xac>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <DIO_voidSetPinDirection+0xa8>
    150a:	80 95       	com	r24
    150c:	84 23       	and	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	9d c0       	rjmp	.+314    	; 0x164c <DIO_voidSetPinDirection+0x1f2>
	case DIO_u8PORTC: CLR_BIT(DDRC , Copy_u8Pin); break;
    1512:	a4 e3       	ldi	r26, 0x34	; 52
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e4 e3       	ldi	r30, 0x34	; 52
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_voidSetPinDirection+0xd6>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_voidSetPinDirection+0xd2>
    1534:	80 95       	com	r24
    1536:	84 23       	and	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	88 c0       	rjmp	.+272    	; 0x164c <DIO_voidSetPinDirection+0x1f2>
	case DIO_u8PORTD: CLR_BIT(DDRD , Copy_u8Pin); break;
    153c:	a1 e3       	ldi	r26, 0x31	; 49
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e1 e3       	ldi	r30, 0x31	; 49
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	48 2f       	mov	r20, r24
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 2e       	mov	r0, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <DIO_voidSetPinDirection+0x100>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	0a 94       	dec	r0
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <DIO_voidSetPinDirection+0xfc>
    155e:	80 95       	com	r24
    1560:	84 23       	and	r24, r20
    1562:	8c 93       	st	X, r24
    1564:	73 c0       	rjmp	.+230    	; 0x164c <DIO_voidSetPinDirection+0x1f2>
	}
}
else if(Copy_u8Direction==DIO_u8OUTPUT){
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	09 f0       	breq	.+2      	; 0x156e <DIO_voidSetPinDirection+0x114>
    156c:	6f c0       	rjmp	.+222    	; 0x164c <DIO_voidSetPinDirection+0x1f2>
	switch(Copy_u8Port){
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	3d 83       	std	Y+5, r19	; 0x05
    1576:	2c 83       	std	Y+4, r18	; 0x04
    1578:	8c 81       	ldd	r24, Y+4	; 0x04
    157a:	9d 81       	ldd	r25, Y+5	; 0x05
    157c:	82 30       	cpi	r24, 0x02	; 2
    157e:	91 05       	cpc	r25, r1
    1580:	51 f1       	breq	.+84     	; 0x15d6 <DIO_voidSetPinDirection+0x17c>
    1582:	2c 81       	ldd	r18, Y+4	; 0x04
    1584:	3d 81       	ldd	r19, Y+5	; 0x05
    1586:	23 30       	cpi	r18, 0x03	; 3
    1588:	31 05       	cpc	r19, r1
    158a:	34 f4       	brge	.+12     	; 0x1598 <DIO_voidSetPinDirection+0x13e>
    158c:	8c 81       	ldd	r24, Y+4	; 0x04
    158e:	9d 81       	ldd	r25, Y+5	; 0x05
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	91 05       	cpc	r25, r1
    1594:	61 f0       	breq	.+24     	; 0x15ae <DIO_voidSetPinDirection+0x154>
    1596:	5a c0       	rjmp	.+180    	; 0x164c <DIO_voidSetPinDirection+0x1f2>
    1598:	2c 81       	ldd	r18, Y+4	; 0x04
    159a:	3d 81       	ldd	r19, Y+5	; 0x05
    159c:	23 30       	cpi	r18, 0x03	; 3
    159e:	31 05       	cpc	r19, r1
    15a0:	71 f1       	breq	.+92     	; 0x15fe <DIO_voidSetPinDirection+0x1a4>
    15a2:	8c 81       	ldd	r24, Y+4	; 0x04
    15a4:	9d 81       	ldd	r25, Y+5	; 0x05
    15a6:	84 30       	cpi	r24, 0x04	; 4
    15a8:	91 05       	cpc	r25, r1
    15aa:	e9 f1       	breq	.+122    	; 0x1626 <DIO_voidSetPinDirection+0x1cc>
    15ac:	4f c0       	rjmp	.+158    	; 0x164c <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTA: SET_BIT(DDRA , Copy_u8Pin); break;
    15ae:	aa e3       	ldi	r26, 0x3A	; 58
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ea e3       	ldi	r30, 0x3A	; 58
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	48 2f       	mov	r20, r24
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	02 2e       	mov	r0, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <DIO_voidSetPinDirection+0x172>
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	0a 94       	dec	r0
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <DIO_voidSetPinDirection+0x16e>
    15d0:	84 2b       	or	r24, r20
    15d2:	8c 93       	st	X, r24
    15d4:	3b c0       	rjmp	.+118    	; 0x164c <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTB: SET_BIT(DDRB , Copy_u8Pin); break;
    15d6:	a7 e3       	ldi	r26, 0x37	; 55
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e7 e3       	ldi	r30, 0x37	; 55
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	48 2f       	mov	r20, r24
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 2e       	mov	r0, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <DIO_voidSetPinDirection+0x19a>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <DIO_voidSetPinDirection+0x196>
    15f8:	84 2b       	or	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	27 c0       	rjmp	.+78     	; 0x164c <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTC: SET_BIT(DDRC , Copy_u8Pin); break;
    15fe:	a4 e3       	ldi	r26, 0x34	; 52
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e4 e3       	ldi	r30, 0x34	; 52
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_voidSetPinDirection+0x1c2>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_voidSetPinDirection+0x1be>
    1620:	84 2b       	or	r24, r20
    1622:	8c 93       	st	X, r24
    1624:	13 c0       	rjmp	.+38     	; 0x164c <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTD: SET_BIT(DDRD , Copy_u8Pin); break;
    1626:	a1 e3       	ldi	r26, 0x31	; 49
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e1 e3       	ldi	r30, 0x31	; 49
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_voidSetPinDirection+0x1ea>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <DIO_voidSetPinDirection+0x1e6>
    1648:	84 2b       	or	r24, r20
    164a:	8c 93       	st	X, r24
		}
}
}
    164c:	27 96       	adiw	r28, 0x07	; 7
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value ){
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	27 97       	sbiw	r28, 0x07	; 7
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	6a 83       	std	Y+2, r22	; 0x02
    1676:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8Value==DIO_u8LOW){
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	88 23       	and	r24, r24
    167c:	09 f0       	breq	.+2      	; 0x1680 <DIO_voidSetPinValue+0x22>
    167e:	75 c0       	rjmp	.+234    	; 0x176a <DIO_voidSetPinValue+0x10c>
		switch(Copy_u8Port){
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	3f 83       	std	Y+7, r19	; 0x07
    1688:	2e 83       	std	Y+6, r18	; 0x06
    168a:	8e 81       	ldd	r24, Y+6	; 0x06
    168c:	9f 81       	ldd	r25, Y+7	; 0x07
    168e:	82 30       	cpi	r24, 0x02	; 2
    1690:	91 05       	cpc	r25, r1
    1692:	61 f1       	breq	.+88     	; 0x16ec <DIO_voidSetPinValue+0x8e>
    1694:	2e 81       	ldd	r18, Y+6	; 0x06
    1696:	3f 81       	ldd	r19, Y+7	; 0x07
    1698:	23 30       	cpi	r18, 0x03	; 3
    169a:	31 05       	cpc	r19, r1
    169c:	34 f4       	brge	.+12     	; 0x16aa <DIO_voidSetPinValue+0x4c>
    169e:	8e 81       	ldd	r24, Y+6	; 0x06
    16a0:	9f 81       	ldd	r25, Y+7	; 0x07
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	91 05       	cpc	r25, r1
    16a6:	69 f0       	breq	.+26     	; 0x16c2 <DIO_voidSetPinValue+0x64>
    16a8:	d3 c0       	rjmp	.+422    	; 0x1850 <DIO_voidSetPinValue+0x1f2>
    16aa:	2e 81       	ldd	r18, Y+6	; 0x06
    16ac:	3f 81       	ldd	r19, Y+7	; 0x07
    16ae:	23 30       	cpi	r18, 0x03	; 3
    16b0:	31 05       	cpc	r19, r1
    16b2:	89 f1       	breq	.+98     	; 0x1716 <DIO_voidSetPinValue+0xb8>
    16b4:	8e 81       	ldd	r24, Y+6	; 0x06
    16b6:	9f 81       	ldd	r25, Y+7	; 0x07
    16b8:	84 30       	cpi	r24, 0x04	; 4
    16ba:	91 05       	cpc	r25, r1
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <DIO_voidSetPinValue+0x62>
    16be:	40 c0       	rjmp	.+128    	; 0x1740 <DIO_voidSetPinValue+0xe2>
    16c0:	c7 c0       	rjmp	.+398    	; 0x1850 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTA: CLR_BIT(PORTA , Copy_u8Pin); break;
    16c2:	ab e3       	ldi	r26, 0x3B	; 59
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	eb e3       	ldi	r30, 0x3B	; 59
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 2e       	mov	r0, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <DIO_voidSetPinValue+0x82>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <DIO_voidSetPinValue+0x7e>
    16e4:	80 95       	com	r24
    16e6:	84 23       	and	r24, r20
    16e8:	8c 93       	st	X, r24
    16ea:	b2 c0       	rjmp	.+356    	; 0x1850 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTB: CLR_BIT(PORTB , Copy_u8Pin); break;
    16ec:	a8 e3       	ldi	r26, 0x38	; 56
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e8 e3       	ldi	r30, 0x38	; 56
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	48 2f       	mov	r20, r24
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 2e       	mov	r0, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <DIO_voidSetPinValue+0xac>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	0a 94       	dec	r0
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <DIO_voidSetPinValue+0xa8>
    170e:	80 95       	com	r24
    1710:	84 23       	and	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	9d c0       	rjmp	.+314    	; 0x1850 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTC: CLR_BIT(PORTC , Copy_u8Pin); break;
    1716:	a5 e3       	ldi	r26, 0x35	; 53
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e5 e3       	ldi	r30, 0x35	; 53
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <DIO_voidSetPinValue+0xd6>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <DIO_voidSetPinValue+0xd2>
    1738:	80 95       	com	r24
    173a:	84 23       	and	r24, r20
    173c:	8c 93       	st	X, r24
    173e:	88 c0       	rjmp	.+272    	; 0x1850 <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTD: CLR_BIT(PORTD , Copy_u8Pin); break;
    1740:	a2 e3       	ldi	r26, 0x32	; 50
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e2 e3       	ldi	r30, 0x32	; 50
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	48 2f       	mov	r20, r24
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	02 2e       	mov	r0, r18
    1758:	02 c0       	rjmp	.+4      	; 0x175e <DIO_voidSetPinValue+0x100>
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	0a 94       	dec	r0
    1760:	e2 f7       	brpl	.-8      	; 0x175a <DIO_voidSetPinValue+0xfc>
    1762:	80 95       	com	r24
    1764:	84 23       	and	r24, r20
    1766:	8c 93       	st	X, r24
    1768:	73 c0       	rjmp	.+230    	; 0x1850 <DIO_voidSetPinValue+0x1f2>
		}
	}
	else if(Copy_u8Value==DIO_u8HIGH){
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	8f 3f       	cpi	r24, 0xFF	; 255
    176e:	09 f0       	breq	.+2      	; 0x1772 <DIO_voidSetPinValue+0x114>
    1770:	6f c0       	rjmp	.+222    	; 0x1850 <DIO_voidSetPinValue+0x1f2>
		switch(Copy_u8Port){
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	3d 83       	std	Y+5, r19	; 0x05
    177a:	2c 83       	std	Y+4, r18	; 0x04
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	9d 81       	ldd	r25, Y+5	; 0x05
    1780:	82 30       	cpi	r24, 0x02	; 2
    1782:	91 05       	cpc	r25, r1
    1784:	51 f1       	breq	.+84     	; 0x17da <DIO_voidSetPinValue+0x17c>
    1786:	2c 81       	ldd	r18, Y+4	; 0x04
    1788:	3d 81       	ldd	r19, Y+5	; 0x05
    178a:	23 30       	cpi	r18, 0x03	; 3
    178c:	31 05       	cpc	r19, r1
    178e:	34 f4       	brge	.+12     	; 0x179c <DIO_voidSetPinValue+0x13e>
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	9d 81       	ldd	r25, Y+5	; 0x05
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	91 05       	cpc	r25, r1
    1798:	61 f0       	breq	.+24     	; 0x17b2 <DIO_voidSetPinValue+0x154>
    179a:	5a c0       	rjmp	.+180    	; 0x1850 <DIO_voidSetPinValue+0x1f2>
    179c:	2c 81       	ldd	r18, Y+4	; 0x04
    179e:	3d 81       	ldd	r19, Y+5	; 0x05
    17a0:	23 30       	cpi	r18, 0x03	; 3
    17a2:	31 05       	cpc	r19, r1
    17a4:	71 f1       	breq	.+92     	; 0x1802 <DIO_voidSetPinValue+0x1a4>
    17a6:	8c 81       	ldd	r24, Y+4	; 0x04
    17a8:	9d 81       	ldd	r25, Y+5	; 0x05
    17aa:	84 30       	cpi	r24, 0x04	; 4
    17ac:	91 05       	cpc	r25, r1
    17ae:	e9 f1       	breq	.+122    	; 0x182a <DIO_voidSetPinValue+0x1cc>
    17b0:	4f c0       	rjmp	.+158    	; 0x1850 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTA: SET_BIT(PORTA , Copy_u8Pin); break;
    17b2:	ab e3       	ldi	r26, 0x3B	; 59
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	eb e3       	ldi	r30, 0x3B	; 59
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	48 2f       	mov	r20, r24
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	02 2e       	mov	r0, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <DIO_voidSetPinValue+0x172>
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	0a 94       	dec	r0
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <DIO_voidSetPinValue+0x16e>
    17d4:	84 2b       	or	r24, r20
    17d6:	8c 93       	st	X, r24
    17d8:	3b c0       	rjmp	.+118    	; 0x1850 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTB: SET_BIT(PORTB , Copy_u8Pin); break;
    17da:	a8 e3       	ldi	r26, 0x38	; 56
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e8 e3       	ldi	r30, 0x38	; 56
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	48 2f       	mov	r20, r24
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 2e       	mov	r0, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <DIO_voidSetPinValue+0x19a>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <DIO_voidSetPinValue+0x196>
    17fc:	84 2b       	or	r24, r20
    17fe:	8c 93       	st	X, r24
    1800:	27 c0       	rjmp	.+78     	; 0x1850 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTC: SET_BIT(PORTC , Copy_u8Pin); break;
    1802:	a5 e3       	ldi	r26, 0x35	; 53
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e5 e3       	ldi	r30, 0x35	; 53
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	48 2f       	mov	r20, r24
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	02 2e       	mov	r0, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <DIO_voidSetPinValue+0x1c2>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	0a 94       	dec	r0
    1822:	e2 f7       	brpl	.-8      	; 0x181c <DIO_voidSetPinValue+0x1be>
    1824:	84 2b       	or	r24, r20
    1826:	8c 93       	st	X, r24
    1828:	13 c0       	rjmp	.+38     	; 0x1850 <DIO_voidSetPinValue+0x1f2>
			case DIO_u8PORTD: SET_BIT(PORTD , Copy_u8Pin); break;
    182a:	a2 e3       	ldi	r26, 0x32	; 50
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e2 e3       	ldi	r30, 0x32	; 50
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <DIO_voidSetPinValue+0x1ea>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <DIO_voidSetPinValue+0x1e6>
    184c:	84 2b       	or	r24, r20
    184e:	8c 93       	st	X, r24
			}
	}

}
    1850:	27 96       	adiw	r28, 0x07	; 7
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <DIO_VoidSetPortDirection>:
void DIO_VoidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction){
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	00 d0       	rcall	.+0      	; 0x1868 <DIO_VoidSetPortDirection+0x6>
    1868:	00 d0       	rcall	.+0      	; 0x186a <DIO_VoidSetPortDirection+0x8>
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	6a 83       	std	Y+2, r22	; 0x02
switch(Copy_u8Port){
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	3c 83       	std	Y+4, r19	; 0x04
    187a:	2b 83       	std	Y+3, r18	; 0x03
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	9c 81       	ldd	r25, Y+4	; 0x04
    1880:	82 30       	cpi	r24, 0x02	; 2
    1882:	91 05       	cpc	r25, r1
    1884:	d9 f0       	breq	.+54     	; 0x18bc <DIO_VoidSetPortDirection+0x5a>
    1886:	2b 81       	ldd	r18, Y+3	; 0x03
    1888:	3c 81       	ldd	r19, Y+4	; 0x04
    188a:	23 30       	cpi	r18, 0x03	; 3
    188c:	31 05       	cpc	r19, r1
    188e:	34 f4       	brge	.+12     	; 0x189c <DIO_VoidSetPortDirection+0x3a>
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	81 30       	cpi	r24, 0x01	; 1
    1896:	91 05       	cpc	r25, r1
    1898:	61 f0       	breq	.+24     	; 0x18b2 <DIO_VoidSetPortDirection+0x50>
    189a:	1e c0       	rjmp	.+60     	; 0x18d8 <DIO_VoidSetPortDirection+0x76>
    189c:	2b 81       	ldd	r18, Y+3	; 0x03
    189e:	3c 81       	ldd	r19, Y+4	; 0x04
    18a0:	23 30       	cpi	r18, 0x03	; 3
    18a2:	31 05       	cpc	r19, r1
    18a4:	81 f0       	breq	.+32     	; 0x18c6 <DIO_VoidSetPortDirection+0x64>
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	9c 81       	ldd	r25, Y+4	; 0x04
    18aa:	84 30       	cpi	r24, 0x04	; 4
    18ac:	91 05       	cpc	r25, r1
    18ae:	81 f0       	breq	.+32     	; 0x18d0 <DIO_VoidSetPortDirection+0x6e>
    18b0:	13 c0       	rjmp	.+38     	; 0x18d8 <DIO_VoidSetPortDirection+0x76>
case DIO_u8PORTA : DDRA= Copy_u8Direction; break;
    18b2:	ea e3       	ldi	r30, 0x3A	; 58
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	80 83       	st	Z, r24
    18ba:	0e c0       	rjmp	.+28     	; 0x18d8 <DIO_VoidSetPortDirection+0x76>
case DIO_u8PORTB : DDRB= Copy_u8Direction; break;
    18bc:	e7 e3       	ldi	r30, 0x37	; 55
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	80 83       	st	Z, r24
    18c4:	09 c0       	rjmp	.+18     	; 0x18d8 <DIO_VoidSetPortDirection+0x76>
case DIO_u8PORTC : DDRC= Copy_u8Direction; break;
    18c6:	e4 e3       	ldi	r30, 0x34	; 52
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	80 83       	st	Z, r24
    18ce:	04 c0       	rjmp	.+8      	; 0x18d8 <DIO_VoidSetPortDirection+0x76>
case DIO_u8PORTD : DDRD= Copy_u8Direction; break;
    18d0:	e1 e3       	ldi	r30, 0x31	; 49
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	80 83       	st	Z, r24

}
}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <DIO_VoidSetPortValue>:

void DIO_VoidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <DIO_VoidSetPortValue+0x6>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <DIO_VoidSetPortValue+0x8>
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	3c 83       	std	Y+4, r19	; 0x04
    18fe:	2b 83       	std	Y+3, r18	; 0x03
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	82 30       	cpi	r24, 0x02	; 2
    1906:	91 05       	cpc	r25, r1
    1908:	d9 f0       	breq	.+54     	; 0x1940 <DIO_VoidSetPortValue+0x5a>
    190a:	2b 81       	ldd	r18, Y+3	; 0x03
    190c:	3c 81       	ldd	r19, Y+4	; 0x04
    190e:	23 30       	cpi	r18, 0x03	; 3
    1910:	31 05       	cpc	r19, r1
    1912:	34 f4       	brge	.+12     	; 0x1920 <DIO_VoidSetPortValue+0x3a>
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	9c 81       	ldd	r25, Y+4	; 0x04
    1918:	81 30       	cpi	r24, 0x01	; 1
    191a:	91 05       	cpc	r25, r1
    191c:	61 f0       	breq	.+24     	; 0x1936 <DIO_VoidSetPortValue+0x50>
    191e:	1e c0       	rjmp	.+60     	; 0x195c <DIO_VoidSetPortValue+0x76>
    1920:	2b 81       	ldd	r18, Y+3	; 0x03
    1922:	3c 81       	ldd	r19, Y+4	; 0x04
    1924:	23 30       	cpi	r18, 0x03	; 3
    1926:	31 05       	cpc	r19, r1
    1928:	81 f0       	breq	.+32     	; 0x194a <DIO_VoidSetPortValue+0x64>
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	84 30       	cpi	r24, 0x04	; 4
    1930:	91 05       	cpc	r25, r1
    1932:	81 f0       	breq	.+32     	; 0x1954 <DIO_VoidSetPortValue+0x6e>
    1934:	13 c0       	rjmp	.+38     	; 0x195c <DIO_VoidSetPortValue+0x76>
	case DIO_u8PORTA : PORTA= Copy_u8Value; break;
    1936:	eb e3       	ldi	r30, 0x3B	; 59
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	80 83       	st	Z, r24
    193e:	0e c0       	rjmp	.+28     	; 0x195c <DIO_VoidSetPortValue+0x76>
	case DIO_u8PORTB : PORTB= Copy_u8Value; break;
    1940:	e8 e3       	ldi	r30, 0x38	; 56
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	80 83       	st	Z, r24
    1948:	09 c0       	rjmp	.+18     	; 0x195c <DIO_VoidSetPortValue+0x76>
	case DIO_u8PORTC : PORTC= Copy_u8Value; break;
    194a:	e5 e3       	ldi	r30, 0x35	; 53
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	80 83       	st	Z, r24
    1952:	04 c0       	rjmp	.+8      	; 0x195c <DIO_VoidSetPortValue+0x76>
	case DIO_u8PORTD : PORTD= Copy_u8Value; break;
    1954:	e2 e3       	ldi	r30, 0x32	; 50
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	80 83       	st	Z, r24

	}
	}
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin){
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	00 d0       	rcall	.+0      	; 0x1970 <DIO_u8GetPinValue+0x6>
    1970:	00 d0       	rcall	.+0      	; 0x1972 <DIO_u8GetPinValue+0x8>
    1972:	0f 92       	push	r0
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	8a 83       	std	Y+2, r24	; 0x02
    197a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result;
	switch(Copy_u8Port){
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	3d 83       	std	Y+5, r19	; 0x05
    1984:	2c 83       	std	Y+4, r18	; 0x04
    1986:	4c 81       	ldd	r20, Y+4	; 0x04
    1988:	5d 81       	ldd	r21, Y+5	; 0x05
    198a:	42 30       	cpi	r20, 0x02	; 2
    198c:	51 05       	cpc	r21, r1
    198e:	41 f1       	breq	.+80     	; 0x19e0 <DIO_u8GetPinValue+0x76>
    1990:	8c 81       	ldd	r24, Y+4	; 0x04
    1992:	9d 81       	ldd	r25, Y+5	; 0x05
    1994:	83 30       	cpi	r24, 0x03	; 3
    1996:	91 05       	cpc	r25, r1
    1998:	34 f4       	brge	.+12     	; 0x19a6 <DIO_u8GetPinValue+0x3c>
    199a:	2c 81       	ldd	r18, Y+4	; 0x04
    199c:	3d 81       	ldd	r19, Y+5	; 0x05
    199e:	21 30       	cpi	r18, 0x01	; 1
    19a0:	31 05       	cpc	r19, r1
    19a2:	61 f0       	breq	.+24     	; 0x19bc <DIO_u8GetPinValue+0x52>
    19a4:	52 c0       	rjmp	.+164    	; 0x1a4a <DIO_u8GetPinValue+0xe0>
    19a6:	4c 81       	ldd	r20, Y+4	; 0x04
    19a8:	5d 81       	ldd	r21, Y+5	; 0x05
    19aa:	43 30       	cpi	r20, 0x03	; 3
    19ac:	51 05       	cpc	r21, r1
    19ae:	51 f1       	breq	.+84     	; 0x1a04 <DIO_u8GetPinValue+0x9a>
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	9d 81       	ldd	r25, Y+5	; 0x05
    19b4:	84 30       	cpi	r24, 0x04	; 4
    19b6:	91 05       	cpc	r25, r1
    19b8:	b9 f1       	breq	.+110    	; 0x1a28 <DIO_u8GetPinValue+0xbe>
    19ba:	47 c0       	rjmp	.+142    	; 0x1a4a <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTA: Local_u8Result=GET_BIT(PINA , Copy_u8Pin);       break;
    19bc:	e9 e3       	ldi	r30, 0x39	; 57
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	88 2f       	mov	r24, r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	a9 01       	movw	r20, r18
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <DIO_u8GetPinValue+0x6a>
    19d0:	55 95       	asr	r21
    19d2:	47 95       	ror	r20
    19d4:	8a 95       	dec	r24
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <DIO_u8GetPinValue+0x66>
    19d8:	ca 01       	movw	r24, r20
    19da:	81 70       	andi	r24, 0x01	; 1
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	35 c0       	rjmp	.+106    	; 0x1a4a <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTB: Local_u8Result=GET_BIT(PINB , Copy_u8Pin);       break;
    19e0:	e6 e3       	ldi	r30, 0x36	; 54
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a9 01       	movw	r20, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <DIO_u8GetPinValue+0x8e>
    19f4:	55 95       	asr	r21
    19f6:	47 95       	ror	r20
    19f8:	8a 95       	dec	r24
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <DIO_u8GetPinValue+0x8a>
    19fc:	ca 01       	movw	r24, r20
    19fe:	81 70       	andi	r24, 0x01	; 1
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	23 c0       	rjmp	.+70     	; 0x1a4a <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTC: Local_u8Result=GET_BIT(PINC , Copy_u8Pin);       break;
    1a04:	e3 e3       	ldi	r30, 0x33	; 51
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	88 2f       	mov	r24, r24
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a9 01       	movw	r20, r18
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <DIO_u8GetPinValue+0xb2>
    1a18:	55 95       	asr	r21
    1a1a:	47 95       	ror	r20
    1a1c:	8a 95       	dec	r24
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <DIO_u8GetPinValue+0xae>
    1a20:	ca 01       	movw	r24, r20
    1a22:	81 70       	andi	r24, 0x01	; 1
    1a24:	89 83       	std	Y+1, r24	; 0x01
    1a26:	11 c0       	rjmp	.+34     	; 0x1a4a <DIO_u8GetPinValue+0xe0>
	case DIO_u8PORTD: Local_u8Result=GET_BIT(PIND , Copy_u8Pin);       break;
    1a28:	e0 e3       	ldi	r30, 0x30	; 48
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	a9 01       	movw	r20, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <DIO_u8GetPinValue+0xd6>
    1a3c:	55 95       	asr	r21
    1a3e:	47 95       	ror	r20
    1a40:	8a 95       	dec	r24
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <DIO_u8GetPinValue+0xd2>
    1a44:	ca 01       	movw	r24, r20
    1a46:	81 70       	andi	r24, 0x01	; 1
    1a48:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Result;
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <KPD_u8GetPressedKey>:

#include"KPD_config.h"
#include"KPD_private.h"
#include"KPD_interface.h"

u8 KPD_u8GetPressedKey(void){
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	a6 97       	sbiw	r28, 0x26	; 38
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61

u8 arr[4][4]={{1,2,3,4},
		      {5,6,7,8},
			  {9,10,11,12},
			  {13,14,15,16}};
    1a70:	ce 01       	movw	r24, r28
    1a72:	42 96       	adiw	r24, 0x12	; 18
    1a74:	9b a3       	std	Y+35, r25	; 0x23
    1a76:	8a a3       	std	Y+34, r24	; 0x22
    1a78:	e5 ea       	ldi	r30, 0xA5	; 165
    1a7a:	f1 e0       	ldi	r31, 0x01	; 1
    1a7c:	fd a3       	std	Y+37, r31	; 0x25
    1a7e:	ec a3       	std	Y+36, r30	; 0x24
    1a80:	f0 e1       	ldi	r31, 0x10	; 16
    1a82:	fe a3       	std	Y+38, r31	; 0x26
    1a84:	ec a1       	ldd	r30, Y+36	; 0x24
    1a86:	fd a1       	ldd	r31, Y+37	; 0x25
    1a88:	00 80       	ld	r0, Z
    1a8a:	8c a1       	ldd	r24, Y+36	; 0x24
    1a8c:	9d a1       	ldd	r25, Y+37	; 0x25
    1a8e:	01 96       	adiw	r24, 0x01	; 1
    1a90:	9d a3       	std	Y+37, r25	; 0x25
    1a92:	8c a3       	std	Y+36, r24	; 0x24
    1a94:	ea a1       	ldd	r30, Y+34	; 0x22
    1a96:	fb a1       	ldd	r31, Y+35	; 0x23
    1a98:	00 82       	st	Z, r0
    1a9a:	8a a1       	ldd	r24, Y+34	; 0x22
    1a9c:	9b a1       	ldd	r25, Y+35	; 0x23
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	9b a3       	std	Y+35, r25	; 0x23
    1aa2:	8a a3       	std	Y+34, r24	; 0x22
    1aa4:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa6:	91 50       	subi	r25, 0x01	; 1
    1aa8:	9e a3       	std	Y+38, r25	; 0x26
    1aaa:	ee a1       	ldd	r30, Y+38	; 0x26
    1aac:	ee 23       	and	r30, r30
    1aae:	51 f7       	brne	.-44     	; 0x1a84 <KPD_u8GetPressedKey+0x28>
	u8 Local_u8Key=23;
    1ab0:	87 e1       	ldi	r24, 0x17	; 23
    1ab2:	89 8b       	std	Y+17, r24	; 0x11
	for(u8 col=0;col<4;col++){
    1ab4:	18 8a       	std	Y+16, r1	; 0x10
    1ab6:	af c0       	rjmp	.+350    	; 0x1c16 <KPD_u8GetPressedKey+0x1ba>
		DIO_voidSetPinValue(KPD_PORT,col,DIO_u8LOW);
    1ab8:	82 e0       	ldi	r24, 0x02	; 2
    1aba:	68 89       	ldd	r22, Y+16	; 0x10
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
		for(u8 row=0;row<4;row++){
    1ac2:	1f 86       	std	Y+15, r1	; 0x0f
    1ac4:	9c c0       	rjmp	.+312    	; 0x1bfe <KPD_u8GetPressedKey+0x1a2>
			if((DIO_u8GetPinValue(KPD_PORT,row+4)==DIO_u8LOW)){
    1ac6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac8:	98 2f       	mov	r25, r24
    1aca:	9c 5f       	subi	r25, 0xFC	; 252
    1acc:	82 e0       	ldi	r24, 0x02	; 2
    1ace:	69 2f       	mov	r22, r25
    1ad0:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_u8GetPinValue>
    1ad4:	88 23       	and	r24, r24
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <KPD_u8GetPressedKey+0x7e>
    1ad8:	8f c0       	rjmp	.+286    	; 0x1bf8 <KPD_u8GetPressedKey+0x19c>
				Local_u8Key=arr[row][col];
    1ada:	8f 85       	ldd	r24, Y+15	; 0x0f
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	88 89       	ldd	r24, Y+16	; 0x10
    1ae2:	48 2f       	mov	r20, r24
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	22 0f       	add	r18, r18
    1ae8:	33 1f       	adc	r19, r19
    1aea:	22 0f       	add	r18, r18
    1aec:	33 1f       	adc	r19, r19
    1aee:	ce 01       	movw	r24, r28
    1af0:	01 96       	adiw	r24, 0x01	; 1
    1af2:	82 0f       	add	r24, r18
    1af4:	93 1f       	adc	r25, r19
    1af6:	84 0f       	add	r24, r20
    1af8:	95 1f       	adc	r25, r21
    1afa:	fc 01       	movw	r30, r24
    1afc:	71 96       	adiw	r30, 0x11	; 17
    1afe:	80 81       	ld	r24, Z
    1b00:	89 8b       	std	Y+17, r24	; 0x11
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	a0 e0       	ldi	r26, 0x00	; 0
    1b08:	b0 e4       	ldi	r27, 0x40	; 64
    1b0a:	8b 87       	std	Y+11, r24	; 0x0b
    1b0c:	9c 87       	std	Y+12, r25	; 0x0c
    1b0e:	ad 87       	std	Y+13, r26	; 0x0d
    1b10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	4a ef       	ldi	r20, 0xFA	; 250
    1b20:	54 e4       	ldi	r21, 0x44	; 68
    1b22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	8f 83       	std	Y+7, r24	; 0x07
    1b2c:	98 87       	std	Y+8, r25	; 0x08
    1b2e:	a9 87       	std	Y+9, r26	; 0x09
    1b30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b32:	6f 81       	ldd	r22, Y+7	; 0x07
    1b34:	78 85       	ldd	r23, Y+8	; 0x08
    1b36:	89 85       	ldd	r24, Y+9	; 0x09
    1b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e8       	ldi	r20, 0x80	; 128
    1b40:	5f e3       	ldi	r21, 0x3F	; 63
    1b42:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b46:	88 23       	and	r24, r24
    1b48:	2c f4       	brge	.+10     	; 0x1b54 <KPD_u8GetPressedKey+0xf8>
		__ticks = 1;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
    1b52:	3f c0       	rjmp	.+126    	; 0x1bd2 <KPD_u8GetPressedKey+0x176>
	else if (__tmp > 65535)
    1b54:	6f 81       	ldd	r22, Y+7	; 0x07
    1b56:	78 85       	ldd	r23, Y+8	; 0x08
    1b58:	89 85       	ldd	r24, Y+9	; 0x09
    1b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	3f ef       	ldi	r19, 0xFF	; 255
    1b60:	4f e7       	ldi	r20, 0x7F	; 127
    1b62:	57 e4       	ldi	r21, 0x47	; 71
    1b64:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b68:	18 16       	cp	r1, r24
    1b6a:	4c f5       	brge	.+82     	; 0x1bbe <KPD_u8GetPressedKey+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e2       	ldi	r20, 0x20	; 32
    1b7a:	51 e4       	ldi	r21, 0x41	; 65
    1b7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	bc 01       	movw	r22, r24
    1b86:	cd 01       	movw	r24, r26
    1b88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9e 83       	std	Y+6, r25	; 0x06
    1b92:	8d 83       	std	Y+5, r24	; 0x05
    1b94:	0f c0       	rjmp	.+30     	; 0x1bb4 <KPD_u8GetPressedKey+0x158>
    1b96:	88 ec       	ldi	r24, 0xC8	; 200
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9c 83       	std	Y+4, r25	; 0x04
    1b9c:	8b 83       	std	Y+3, r24	; 0x03
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <KPD_u8GetPressedKey+0x146>
    1ba6:	9c 83       	std	Y+4, r25	; 0x04
    1ba8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1baa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bac:	9e 81       	ldd	r25, Y+6	; 0x06
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	9e 83       	std	Y+6, r25	; 0x06
    1bb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	69 f7       	brne	.-38     	; 0x1b96 <KPD_u8GetPressedKey+0x13a>
    1bbc:	14 c0       	rjmp	.+40     	; 0x1be6 <KPD_u8GetPressedKey+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc0:	78 85       	ldd	r23, Y+8	; 0x08
    1bc2:	89 85       	ldd	r24, Y+9	; 0x09
    1bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9e 83       	std	Y+6, r25	; 0x06
    1bd0:	8d 83       	std	Y+5, r24	; 0x05
    1bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd6:	9a 83       	std	Y+2, r25	; 0x02
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <KPD_u8GetPressedKey+0x182>
    1be2:	9a 83       	std	Y+2, r25	; 0x02
    1be4:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(2);
				while(DIO_u8GetPinValue(KPD_PORT,row+4)==DIO_u8LOW){
    1be6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be8:	98 2f       	mov	r25, r24
    1bea:	9c 5f       	subi	r25, 0xFC	; 252
    1bec:	82 e0       	ldi	r24, 0x02	; 2
    1bee:	69 2f       	mov	r22, r25
    1bf0:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_u8GetPinValue>
    1bf4:	88 23       	and	r24, r24
    1bf6:	b9 f3       	breq	.-18     	; 0x1be6 <KPD_u8GetPressedKey+0x18a>
			  {9,10,11,12},
			  {13,14,15,16}};
	u8 Local_u8Key=23;
	for(u8 col=0;col<4;col++){
		DIO_voidSetPinValue(KPD_PORT,col,DIO_u8LOW);
		for(u8 row=0;row<4;row++){
    1bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bfa:	8f 5f       	subi	r24, 0xFF	; 255
    1bfc:	8f 87       	std	Y+15, r24	; 0x0f
    1bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c00:	84 30       	cpi	r24, 0x04	; 4
    1c02:	08 f4       	brcc	.+2      	; 0x1c06 <KPD_u8GetPressedKey+0x1aa>
    1c04:	60 cf       	rjmp	.-320    	; 0x1ac6 <KPD_u8GetPressedKey+0x6a>
				while(DIO_u8GetPinValue(KPD_PORT,row+4)==DIO_u8LOW){

				}
			}
		}
		DIO_voidSetPinValue(KPD_PORT,col,DIO_u8HIGH);
    1c06:	82 e0       	ldi	r24, 0x02	; 2
    1c08:	68 89       	ldd	r22, Y+16	; 0x10
    1c0a:	4f ef       	ldi	r20, 0xFF	; 255
    1c0c:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
u8 arr[4][4]={{1,2,3,4},
		      {5,6,7,8},
			  {9,10,11,12},
			  {13,14,15,16}};
	u8 Local_u8Key=23;
	for(u8 col=0;col<4;col++){
    1c10:	88 89       	ldd	r24, Y+16	; 0x10
    1c12:	8f 5f       	subi	r24, 0xFF	; 255
    1c14:	88 8b       	std	Y+16, r24	; 0x10
    1c16:	88 89       	ldd	r24, Y+16	; 0x10
    1c18:	84 30       	cpi	r24, 0x04	; 4
    1c1a:	08 f4       	brcc	.+2      	; 0x1c1e <KPD_u8GetPressedKey+0x1c2>
    1c1c:	4d cf       	rjmp	.-358    	; 0x1ab8 <KPD_u8GetPressedKey+0x5c>
				}
			}
		}
		DIO_voidSetPinValue(KPD_PORT,col,DIO_u8HIGH);
	}
return Local_u8Key;
    1c1e:	89 89       	ldd	r24, Y+17	; 0x11

}
    1c20:	a6 96       	adiw	r28, 0x26	; 38
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	cd bf       	out	0x3d, r28	; 61
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <PWM_voidinit>:
#include "PWM_private.h"
#include "PWM_interface.h"
#include "PWM_config.h"


void PWM_voidinit(void){
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
	//clear on compare match, set on top
	//toggle the functionality for the opposite operations
	SET_BIT(TCCR1A , 7);
    1c3a:	af e4       	ldi	r26, 0x4F	; 79
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	ef e4       	ldi	r30, 0x4F	; 79
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	80 68       	ori	r24, 0x80	; 128
    1c46:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , 6);
    1c48:	af e4       	ldi	r26, 0x4F	; 79
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	ef e4       	ldi	r30, 0x4F	; 79
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	8f 7b       	andi	r24, 0xBF	; 191
    1c54:	8c 93       	st	X, r24

	//select Fast PWM (Mode14)
	SET_BIT(TCCR1A , 1);
    1c56:	af e4       	ldi	r26, 0x4F	; 79
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	ef e4       	ldi	r30, 0x4F	; 79
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	82 60       	ori	r24, 0x02	; 2
    1c62:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , 0);
    1c64:	af e4       	ldi	r26, 0x4F	; 79
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	ef e4       	ldi	r30, 0x4F	; 79
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8e 7f       	andi	r24, 0xFE	; 254
    1c70:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 4);
    1c72:	ae e4       	ldi	r26, 0x4E	; 78
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	ee e4       	ldi	r30, 0x4E	; 78
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 61       	ori	r24, 0x10	; 16
    1c7e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 3);
    1c80:	ae e4       	ldi	r26, 0x4E	; 78
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	ee e4       	ldi	r30, 0x4E	; 78
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	88 60       	ori	r24, 0x08	; 8
    1c8c:	8c 93       	st	X, r24

	//Clock pre-scalar selection:Division by 8 Mode
	CLR_BIT(TCCR1B , 2);
    1c8e:	ae e4       	ldi	r26, 0x4E	; 78
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ee e4       	ldi	r30, 0x4E	; 78
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	8b 7f       	andi	r24, 0xFB	; 251
    1c9a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 1);
    1c9c:	ae e4       	ldi	r26, 0x4E	; 78
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	ee e4       	ldi	r30, 0x4E	; 78
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	82 60       	ori	r24, 0x02	; 2
    1ca8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , 0);
    1caa:	ae e4       	ldi	r26, 0x4E	; 78
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	ee e4       	ldi	r30, 0x4E	; 78
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	8e 7f       	andi	r24, 0xFE	; 254
    1cb6:	8c 93       	st	X, r24
}
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <PWM_voidSetTopValue>:
void PWM_voidSetTopValue(u16 Copy_u16TopValue){
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <PWM_voidSetTopValue+0x6>
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	9a 83       	std	Y+2, r25	; 0x02
    1cca:	89 83       	std	Y+1, r24	; 0x01
          ICR1 = Copy_u16TopValue;
    1ccc:	e6 e4       	ldi	r30, 0x46	; 70
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd4:	91 83       	std	Z+1, r25	; 0x01
    1cd6:	80 83       	st	Z, r24
}
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <PWM_voidSetOCRValue>:
void PWM_voidSetOCRValue(u16 Copy_u16OCRValue){
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <PWM_voidSetOCRValue+0x6>
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	89 83       	std	Y+1, r24	; 0x01
          OCR1A = Copy_u16OCRValue;
    1cf0:	ea e4       	ldi	r30, 0x4A	; 74
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	80 83       	st	Z, r24
}
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <main>:
#include "PWM_interface.h"
#include <util/delay.h>
//servo motor function prototype
void Servo_voidSetAngle(u8 Copy_u8DesiredAngle);

int main(void){
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	ec 97       	sbiw	r28, 0x3c	; 60
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
	//for the keypad
	DIO_VoidSetPortDirection(DIO_u8PORTB,0b00001111);
    1d1a:	82 e0       	ldi	r24, 0x02	; 2
    1d1c:	6f e0       	ldi	r22, 0x0F	; 15
    1d1e:	0e 94 31 0c 	call	0x1862	; 0x1862 <DIO_VoidSetPortDirection>
	DIO_VoidSetPortValue(DIO_u8PORTB,0b11111111);
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	6f ef       	ldi	r22, 0xFF	; 255
    1d26:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <DIO_VoidSetPortValue>
	//for the clcd
	DIO_VoidSetPortDirection(DIO_u8PORTC,0b11111111);
    1d2a:	83 e0       	ldi	r24, 0x03	; 3
    1d2c:	6f ef       	ldi	r22, 0xFF	; 255
    1d2e:	0e 94 31 0c 	call	0x1862	; 0x1862 <DIO_VoidSetPortDirection>
	DIO_VoidSetPortDirection(DIO_u8PORTA,0b01111111);//bits 3 & 4 for the DC Motor
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	6f e7       	ldi	r22, 0x7F	; 127
    1d36:	0e 94 31 0c 	call	0x1862	; 0x1862 <DIO_VoidSetPortDirection>
													 //bits 5 & 6 for the buzzer

	DIO_VoidSetPortDirection(DIO_u8PORTD,0b00101111);//for the LEDs and the  no 5 servomotor
    1d3a:	84 e0       	ldi	r24, 0x04	; 4
    1d3c:	6f e2       	ldi	r22, 0x2F	; 47
    1d3e:	0e 94 31 0c 	call	0x1862	; 0x1862 <DIO_VoidSetPortDirection>
													 //bits 7 & 6 for the FPGA input
													 //bit 4 for the restart slider
	DIO_voidSetPinValue(DIO_u8PORTD , 4 , DIO_u8HIGH);
    1d42:	84 e0       	ldi	r24, 0x04	; 4
    1d44:	64 e0       	ldi	r22, 0x04	; 4
    1d46:	4f ef       	ldi	r20, 0xFF	; 255
    1d48:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
	//important variables
	u8 user_input=255; // the entered password
    1d4c:	8f ef       	ldi	r24, 0xFF	; 255
    1d4e:	8c af       	std	Y+60, r24	; 0x3c
	u8 home_state = 0; //0 for closed, 1 for opened
    1d50:	1b ae       	std	Y+59, r1	; 0x3b
	u8 relock = 1; //for relocking the home
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	8a af       	std	Y+58, r24	; 0x3a
	//initializations
	PWM_voidinit();
    1d56:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <PWM_voidinit>
	CLCD_voidInit();
    1d5a:	0e 94 30 08 	call	0x1060	; 0x1060 <CLCD_voidInit>
	CLCD_voidClearDisplay();
    1d5e:	0e 94 04 09 	call	0x1208	; 0x1208 <CLCD_voidClearDisplay>
	Servo_voidSetAngle(0);
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	0e 94 47 11 	call	0x228e	; 0x228e <Servo_voidSetAngle>
	u8 operation = 0;
    1d68:	19 ae       	std	Y+57, r1	; 0x39
    1d6a:	56 c2       	rjmp	.+1196   	; 0x2218 <main+0x512>
	//the unlocking mechanism
	while(1){ //the password is 123

	    while(!home_state){
	    	CLCD_voidClearDisplay();
    1d6c:	0e 94 04 09 	call	0x1208	; 0x1208 <CLCD_voidClearDisplay>
	    	CLCD_voidSendString("CLOSED");
    1d70:	80 e6       	ldi	r24, 0x60	; 96
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 be 08 	call	0x117c	; 0x117c <CLCD_voidSendString>
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	aa e7       	ldi	r26, 0x7A	; 122
    1d7e:	b4 e4       	ldi	r27, 0x44	; 68
    1d80:	8d ab       	std	Y+53, r24	; 0x35
    1d82:	9e ab       	std	Y+54, r25	; 0x36
    1d84:	af ab       	std	Y+55, r26	; 0x37
    1d86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d88:	6d a9       	ldd	r22, Y+53	; 0x35
    1d8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	4a ef       	ldi	r20, 0xFA	; 250
    1d96:	54 e4       	ldi	r21, 0x44	; 68
    1d98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	89 ab       	std	Y+49, r24	; 0x31
    1da2:	9a ab       	std	Y+50, r25	; 0x32
    1da4:	ab ab       	std	Y+51, r26	; 0x33
    1da6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1da8:	69 a9       	ldd	r22, Y+49	; 0x31
    1daa:	7a a9       	ldd	r23, Y+50	; 0x32
    1dac:	8b a9       	ldd	r24, Y+51	; 0x33
    1dae:	9c a9       	ldd	r25, Y+52	; 0x34
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <main+0xc4>
		__ticks = 1;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	98 ab       	std	Y+48, r25	; 0x30
    1dc6:	8f a7       	std	Y+47, r24	; 0x2f
    1dc8:	3f c0       	rjmp	.+126    	; 0x1e48 <main+0x142>
	else if (__tmp > 65535)
    1dca:	69 a9       	ldd	r22, Y+49	; 0x31
    1dcc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dce:	8b a9       	ldd	r24, Y+51	; 0x33
    1dd0:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	3f ef       	ldi	r19, 0xFF	; 255
    1dd6:	4f e7       	ldi	r20, 0x7F	; 127
    1dd8:	57 e4       	ldi	r21, 0x47	; 71
    1dda:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dde:	18 16       	cp	r1, r24
    1de0:	4c f5       	brge	.+82     	; 0x1e34 <main+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de2:	6d a9       	ldd	r22, Y+53	; 0x35
    1de4:	7e a9       	ldd	r23, Y+54	; 0x36
    1de6:	8f a9       	ldd	r24, Y+55	; 0x37
    1de8:	98 ad       	ldd	r25, Y+56	; 0x38
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e2       	ldi	r20, 0x20	; 32
    1df0:	51 e4       	ldi	r21, 0x41	; 65
    1df2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	98 ab       	std	Y+48, r25	; 0x30
    1e08:	8f a7       	std	Y+47, r24	; 0x2f
    1e0a:	0f c0       	rjmp	.+30     	; 0x1e2a <main+0x124>
    1e0c:	88 ec       	ldi	r24, 0xC8	; 200
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	9e a7       	std	Y+46, r25	; 0x2e
    1e12:	8d a7       	std	Y+45, r24	; 0x2d
    1e14:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e16:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <main+0x112>
    1e1c:	9e a7       	std	Y+46, r25	; 0x2e
    1e1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e22:	98 a9       	ldd	r25, Y+48	; 0x30
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	98 ab       	std	Y+48, r25	; 0x30
    1e28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	69 f7       	brne	.-38     	; 0x1e0c <main+0x106>
    1e32:	14 c0       	rjmp	.+40     	; 0x1e5c <main+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e34:	69 a9       	ldd	r22, Y+49	; 0x31
    1e36:	7a a9       	ldd	r23, Y+50	; 0x32
    1e38:	8b a9       	ldd	r24, Y+51	; 0x33
    1e3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	98 ab       	std	Y+48, r25	; 0x30
    1e46:	8f a7       	std	Y+47, r24	; 0x2f
    1e48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4c:	9c a7       	std	Y+44, r25	; 0x2c
    1e4e:	8b a7       	std	Y+43, r24	; 0x2b
    1e50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e52:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <main+0x14e>
    1e58:	9c a7       	std	Y+44, r25	; 0x2c
    1e5a:	8b a7       	std	Y+43, r24	; 0x2b
	    	_delay_ms(1000);
	    	relock = 1;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	8a af       	std	Y+58, r24	; 0x3a
	    	DC_MOTOR_voidStop();
    1e60:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DC_MOTOR_voidStop>
	    	DIO_voidSetPinValue(DIO_u8PORTD , 0 , DIO_u8HIGH);
    1e64:	84 e0       	ldi	r24, 0x04	; 4
    1e66:	60 e0       	ldi	r22, 0x00	; 0
    1e68:	4f ef       	ldi	r20, 0xFF	; 255
    1e6a:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
	    	DIO_voidSetPinValue(DIO_u8PORTD , 1 , DIO_u8HIGH);
    1e6e:	84 e0       	ldi	r24, 0x04	; 4
    1e70:	61 e0       	ldi	r22, 0x01	; 1
    1e72:	4f ef       	ldi	r20, 0xFF	; 255
    1e74:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
	    	DIO_voidSetPinValue(DIO_u8PORTD , 2 , DIO_u8LOW);
    1e78:	84 e0       	ldi	r24, 0x04	; 4
    1e7a:	62 e0       	ldi	r22, 0x02	; 2
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
	    	DIO_voidSetPinValue(DIO_u8PORTD , 3 , DIO_u8LOW);
    1e82:	84 e0       	ldi	r24, 0x04	; 4
    1e84:	63 e0       	ldi	r22, 0x03	; 3
    1e86:	40 e0       	ldi	r20, 0x00	; 0
    1e88:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
	    	//1st key
	    	CLCD_voidClearDisplay();
    1e8c:	0e 94 04 09 	call	0x1208	; 0x1208 <CLCD_voidClearDisplay>
	    	CLCD_voidSendString("1st key is:..");
    1e90:	87 e6       	ldi	r24, 0x67	; 103
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	0e 94 be 08 	call	0x117c	; 0x117c <CLCD_voidSendString>
    1e98:	03 c0       	rjmp	.+6      	; 0x1ea0 <main+0x19a>
	        while(user_input!=1 && user_input!=9){
	        	user_input=KPD_u8GetPressedKey();
    1e9a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <KPD_u8GetPressedKey>
    1e9e:	8c af       	std	Y+60, r24	; 0x3c
	    	DIO_voidSetPinValue(DIO_u8PORTD , 2 , DIO_u8LOW);
	    	DIO_voidSetPinValue(DIO_u8PORTD , 3 , DIO_u8LOW);
	    	//1st key
	    	CLCD_voidClearDisplay();
	    	CLCD_voidSendString("1st key is:..");
	        while(user_input!=1 && user_input!=9){
    1ea0:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ea2:	81 30       	cpi	r24, 0x01	; 1
    1ea4:	19 f0       	breq	.+6      	; 0x1eac <main+0x1a6>
    1ea6:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ea8:	89 30       	cpi	r24, 0x09	; 9
    1eaa:	b9 f7       	brne	.-18     	; 0x1e9a <main+0x194>
	        	user_input=KPD_u8GetPressedKey();
	        }
    		if(user_input==9){
    1eac:	8c ad       	ldd	r24, Y+60	; 0x3c
    1eae:	89 30       	cpi	r24, 0x09	; 9
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <main+0x1ae>
    1eb2:	7a c0       	rjmp	.+244    	; 0x1fa8 <main+0x2a2>
    			DIO_voidSetPinValue(DIO_u8PORTA , 5 , DIO_u8HIGH);
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	65 e0       	ldi	r22, 0x05	; 5
    1eb8:	4f ef       	ldi	r20, 0xFF	; 255
    1eba:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	aa e7       	ldi	r26, 0x7A	; 122
    1ec4:	b4 e4       	ldi	r27, 0x44	; 68
    1ec6:	8f a3       	std	Y+39, r24	; 0x27
    1ec8:	98 a7       	std	Y+40, r25	; 0x28
    1eca:	a9 a7       	std	Y+41, r26	; 0x29
    1ecc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	6f a1       	ldd	r22, Y+39	; 0x27
    1ed0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ed2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	4a ef       	ldi	r20, 0xFA	; 250
    1edc:	54 e4       	ldi	r21, 0x44	; 68
    1ede:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8b a3       	std	Y+35, r24	; 0x23
    1ee8:	9c a3       	std	Y+36, r25	; 0x24
    1eea:	ad a3       	std	Y+37, r26	; 0x25
    1eec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eee:	6b a1       	ldd	r22, Y+35	; 0x23
    1ef0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e8       	ldi	r20, 0x80	; 128
    1efc:	5f e3       	ldi	r21, 0x3F	; 63
    1efe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f02:	88 23       	and	r24, r24
    1f04:	2c f4       	brge	.+10     	; 0x1f10 <main+0x20a>
		__ticks = 1;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9a a3       	std	Y+34, r25	; 0x22
    1f0c:	89 a3       	std	Y+33, r24	; 0x21
    1f0e:	3f c0       	rjmp	.+126    	; 0x1f8e <main+0x288>
	else if (__tmp > 65535)
    1f10:	6b a1       	ldd	r22, Y+35	; 0x23
    1f12:	7c a1       	ldd	r23, Y+36	; 0x24
    1f14:	8d a1       	ldd	r24, Y+37	; 0x25
    1f16:	9e a1       	ldd	r25, Y+38	; 0x26
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	3f ef       	ldi	r19, 0xFF	; 255
    1f1c:	4f e7       	ldi	r20, 0x7F	; 127
    1f1e:	57 e4       	ldi	r21, 0x47	; 71
    1f20:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	4c f5       	brge	.+82     	; 0x1f7a <main+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f28:	6f a1       	ldd	r22, Y+39	; 0x27
    1f2a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f2c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e2       	ldi	r20, 0x20	; 32
    1f36:	51 e4       	ldi	r21, 0x41	; 65
    1f38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	bc 01       	movw	r22, r24
    1f42:	cd 01       	movw	r24, r26
    1f44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9a a3       	std	Y+34, r25	; 0x22
    1f4e:	89 a3       	std	Y+33, r24	; 0x21
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <main+0x26a>
    1f52:	88 ec       	ldi	r24, 0xC8	; 200
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	98 a3       	std	Y+32, r25	; 0x20
    1f58:	8f 8f       	std	Y+31, r24	; 0x1f
    1f5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f5c:	98 a1       	ldd	r25, Y+32	; 0x20
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <main+0x258>
    1f62:	98 a3       	std	Y+32, r25	; 0x20
    1f64:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f66:	89 a1       	ldd	r24, Y+33	; 0x21
    1f68:	9a a1       	ldd	r25, Y+34	; 0x22
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	9a a3       	std	Y+34, r25	; 0x22
    1f6e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f70:	89 a1       	ldd	r24, Y+33	; 0x21
    1f72:	9a a1       	ldd	r25, Y+34	; 0x22
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	69 f7       	brne	.-38     	; 0x1f52 <main+0x24c>
    1f78:	14 c0       	rjmp	.+40     	; 0x1fa2 <main+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f80:	9e a1       	ldd	r25, Y+38	; 0x26
    1f82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9a a3       	std	Y+34, r25	; 0x22
    1f8c:	89 a3       	std	Y+33, r24	; 0x21
    1f8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f90:	9a a1       	ldd	r25, Y+34	; 0x22
    1f92:	9e 8f       	std	Y+30, r25	; 0x1e
    1f94:	8d 8f       	std	Y+29, r24	; 0x1d
    1f96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <main+0x294>
    1f9e:	9e 8f       	std	Y+30, r25	; 0x1e
    1fa0:	8d 8f       	std	Y+29, r24	; 0x1d
    			_delay_ms(1000);
    			user_input = 255;
    1fa2:	8f ef       	ldi	r24, 0xFF	; 255
    1fa4:	8c af       	std	Y+60, r24	; 0x3c
    1fa6:	38 c1       	rjmp	.+624    	; 0x2218 <main+0x512>
    			continue;
    		}

	    		//2nd key
    		CLCD_voidClearDisplay();
    1fa8:	0e 94 04 09 	call	0x1208	; 0x1208 <CLCD_voidClearDisplay>
    		CLCD_voidSendString("2nd ke is:..");
    1fac:	85 e7       	ldi	r24, 0x75	; 117
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	0e 94 be 08 	call	0x117c	; 0x117c <CLCD_voidSendString>
    1fb4:	03 c0       	rjmp	.+6      	; 0x1fbc <main+0x2b6>
	        while(user_input!=2 && user_input!=9){
	        	user_input=KPD_u8GetPressedKey();
    1fb6:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <KPD_u8GetPressedKey>
    1fba:	8c af       	std	Y+60, r24	; 0x3c
    		}

	    		//2nd key
    		CLCD_voidClearDisplay();
    		CLCD_voidSendString("2nd ke is:..");
	        while(user_input!=2 && user_input!=9){
    1fbc:	8c ad       	ldd	r24, Y+60	; 0x3c
    1fbe:	82 30       	cpi	r24, 0x02	; 2
    1fc0:	19 f0       	breq	.+6      	; 0x1fc8 <main+0x2c2>
    1fc2:	8c ad       	ldd	r24, Y+60	; 0x3c
    1fc4:	89 30       	cpi	r24, 0x09	; 9
    1fc6:	b9 f7       	brne	.-18     	; 0x1fb6 <main+0x2b0>
	        	user_input=KPD_u8GetPressedKey();
	        }
    		if(user_input==9){
    1fc8:	8c ad       	ldd	r24, Y+60	; 0x3c
    1fca:	89 30       	cpi	r24, 0x09	; 9
    1fcc:	09 f0       	breq	.+2      	; 0x1fd0 <main+0x2ca>
    1fce:	7a c0       	rjmp	.+244    	; 0x20c4 <main+0x3be>
    			DIO_voidSetPinValue(DIO_u8PORTA , 5 , DIO_u8HIGH);
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	65 e0       	ldi	r22, 0x05	; 5
    1fd4:	4f ef       	ldi	r20, 0xFF	; 255
    1fd6:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	90 e4       	ldi	r25, 0x40	; 64
    1fde:	ac e1       	ldi	r26, 0x1C	; 28
    1fe0:	b6 e4       	ldi	r27, 0x46	; 70
    1fe2:	89 8f       	std	Y+25, r24	; 0x19
    1fe4:	9a 8f       	std	Y+26, r25	; 0x1a
    1fe6:	ab 8f       	std	Y+27, r26	; 0x1b
    1fe8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fea:	69 8d       	ldd	r22, Y+25	; 0x19
    1fec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ff0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	4a ef       	ldi	r20, 0xFA	; 250
    1ff8:	54 e4       	ldi	r21, 0x44	; 68
    1ffa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	8d 8b       	std	Y+21, r24	; 0x15
    2004:	9e 8b       	std	Y+22, r25	; 0x16
    2006:	af 8b       	std	Y+23, r26	; 0x17
    2008:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    200a:	6d 89       	ldd	r22, Y+21	; 0x15
    200c:	7e 89       	ldd	r23, Y+22	; 0x16
    200e:	8f 89       	ldd	r24, Y+23	; 0x17
    2010:	98 8d       	ldd	r25, Y+24	; 0x18
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e8       	ldi	r20, 0x80	; 128
    2018:	5f e3       	ldi	r21, 0x3F	; 63
    201a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    201e:	88 23       	and	r24, r24
    2020:	2c f4       	brge	.+10     	; 0x202c <main+0x326>
		__ticks = 1;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9c 8b       	std	Y+20, r25	; 0x14
    2028:	8b 8b       	std	Y+19, r24	; 0x13
    202a:	3f c0       	rjmp	.+126    	; 0x20aa <main+0x3a4>
	else if (__tmp > 65535)
    202c:	6d 89       	ldd	r22, Y+21	; 0x15
    202e:	7e 89       	ldd	r23, Y+22	; 0x16
    2030:	8f 89       	ldd	r24, Y+23	; 0x17
    2032:	98 8d       	ldd	r25, Y+24	; 0x18
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	3f ef       	ldi	r19, 0xFF	; 255
    2038:	4f e7       	ldi	r20, 0x7F	; 127
    203a:	57 e4       	ldi	r21, 0x47	; 71
    203c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2040:	18 16       	cp	r1, r24
    2042:	4c f5       	brge	.+82     	; 0x2096 <main+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2044:	69 8d       	ldd	r22, Y+25	; 0x19
    2046:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2048:	8b 8d       	ldd	r24, Y+27	; 0x1b
    204a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e2       	ldi	r20, 0x20	; 32
    2052:	51 e4       	ldi	r21, 0x41	; 65
    2054:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	bc 01       	movw	r22, r24
    205e:	cd 01       	movw	r24, r26
    2060:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	9c 8b       	std	Y+20, r25	; 0x14
    206a:	8b 8b       	std	Y+19, r24	; 0x13
    206c:	0f c0       	rjmp	.+30     	; 0x208c <main+0x386>
    206e:	88 ec       	ldi	r24, 0xC8	; 200
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9a 8b       	std	Y+18, r25	; 0x12
    2074:	89 8b       	std	Y+17, r24	; 0x11
    2076:	89 89       	ldd	r24, Y+17	; 0x11
    2078:	9a 89       	ldd	r25, Y+18	; 0x12
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <main+0x374>
    207e:	9a 8b       	std	Y+18, r25	; 0x12
    2080:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2082:	8b 89       	ldd	r24, Y+19	; 0x13
    2084:	9c 89       	ldd	r25, Y+20	; 0x14
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	9c 8b       	std	Y+20, r25	; 0x14
    208a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208c:	8b 89       	ldd	r24, Y+19	; 0x13
    208e:	9c 89       	ldd	r25, Y+20	; 0x14
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	69 f7       	brne	.-38     	; 0x206e <main+0x368>
    2094:	14 c0       	rjmp	.+40     	; 0x20be <main+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2096:	6d 89       	ldd	r22, Y+21	; 0x15
    2098:	7e 89       	ldd	r23, Y+22	; 0x16
    209a:	8f 89       	ldd	r24, Y+23	; 0x17
    209c:	98 8d       	ldd	r25, Y+24	; 0x18
    209e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9c 8b       	std	Y+20, r25	; 0x14
    20a8:	8b 8b       	std	Y+19, r24	; 0x13
    20aa:	8b 89       	ldd	r24, Y+19	; 0x13
    20ac:	9c 89       	ldd	r25, Y+20	; 0x14
    20ae:	98 8b       	std	Y+16, r25	; 0x10
    20b0:	8f 87       	std	Y+15, r24	; 0x0f
    20b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b4:	98 89       	ldd	r25, Y+16	; 0x10
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <main+0x3b0>
    20ba:	98 8b       	std	Y+16, r25	; 0x10
    20bc:	8f 87       	std	Y+15, r24	; 0x0f
    			_delay_ms(10000);
    			user_input = 255;
    20be:	8f ef       	ldi	r24, 0xFF	; 255
    20c0:	8c af       	std	Y+60, r24	; 0x3c
    20c2:	aa c0       	rjmp	.+340    	; 0x2218 <main+0x512>
    			continue;
    		}
	          //3rd key
    		CLCD_voidClearDisplay();
    20c4:	0e 94 04 09 	call	0x1208	; 0x1208 <CLCD_voidClearDisplay>
    		CLCD_voidSendString("3rd key is:..");
    20c8:	82 e8       	ldi	r24, 0x82	; 130
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	0e 94 be 08 	call	0x117c	; 0x117c <CLCD_voidSendString>
    20d0:	03 c0       	rjmp	.+6      	; 0x20d8 <main+0x3d2>
	        while(user_input!=1 && user_input!=9){
	        	user_input=KPD_u8GetPressedKey();
    20d2:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <KPD_u8GetPressedKey>
    20d6:	8c af       	std	Y+60, r24	; 0x3c
    			continue;
    		}
	          //3rd key
    		CLCD_voidClearDisplay();
    		CLCD_voidSendString("3rd key is:..");
	        while(user_input!=1 && user_input!=9){
    20d8:	8c ad       	ldd	r24, Y+60	; 0x3c
    20da:	81 30       	cpi	r24, 0x01	; 1
    20dc:	19 f0       	breq	.+6      	; 0x20e4 <main+0x3de>
    20de:	8c ad       	ldd	r24, Y+60	; 0x3c
    20e0:	89 30       	cpi	r24, 0x09	; 9
    20e2:	b9 f7       	brne	.-18     	; 0x20d2 <main+0x3cc>
	        	user_input=KPD_u8GetPressedKey();
	        }
    		if(user_input==9){
    20e4:	8c ad       	ldd	r24, Y+60	; 0x3c
    20e6:	89 30       	cpi	r24, 0x09	; 9
    20e8:	09 f0       	breq	.+2      	; 0x20ec <main+0x3e6>
    20ea:	7a c0       	rjmp	.+244    	; 0x21e0 <main+0x4da>
    			DIO_voidSetPinValue(DIO_u8PORTA , 5 , DIO_u8HIGH);
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	65 e0       	ldi	r22, 0x05	; 5
    20f0:	4f ef       	ldi	r20, 0xFF	; 255
    20f2:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	90 e4       	ldi	r25, 0x40	; 64
    20fa:	ac e1       	ldi	r26, 0x1C	; 28
    20fc:	b6 e4       	ldi	r27, 0x46	; 70
    20fe:	8b 87       	std	Y+11, r24	; 0x0b
    2100:	9c 87       	std	Y+12, r25	; 0x0c
    2102:	ad 87       	std	Y+13, r26	; 0x0d
    2104:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2106:	6b 85       	ldd	r22, Y+11	; 0x0b
    2108:	7c 85       	ldd	r23, Y+12	; 0x0c
    210a:	8d 85       	ldd	r24, Y+13	; 0x0d
    210c:	9e 85       	ldd	r25, Y+14	; 0x0e
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	4a ef       	ldi	r20, 0xFA	; 250
    2114:	54 e4       	ldi	r21, 0x44	; 68
    2116:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	8f 83       	std	Y+7, r24	; 0x07
    2120:	98 87       	std	Y+8, r25	; 0x08
    2122:	a9 87       	std	Y+9, r26	; 0x09
    2124:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2126:	6f 81       	ldd	r22, Y+7	; 0x07
    2128:	78 85       	ldd	r23, Y+8	; 0x08
    212a:	89 85       	ldd	r24, Y+9	; 0x09
    212c:	9a 85       	ldd	r25, Y+10	; 0x0a
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e8       	ldi	r20, 0x80	; 128
    2134:	5f e3       	ldi	r21, 0x3F	; 63
    2136:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    213a:	88 23       	and	r24, r24
    213c:	2c f4       	brge	.+10     	; 0x2148 <main+0x442>
		__ticks = 1;
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	9e 83       	std	Y+6, r25	; 0x06
    2144:	8d 83       	std	Y+5, r24	; 0x05
    2146:	3f c0       	rjmp	.+126    	; 0x21c6 <main+0x4c0>
	else if (__tmp > 65535)
    2148:	6f 81       	ldd	r22, Y+7	; 0x07
    214a:	78 85       	ldd	r23, Y+8	; 0x08
    214c:	89 85       	ldd	r24, Y+9	; 0x09
    214e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	3f ef       	ldi	r19, 0xFF	; 255
    2154:	4f e7       	ldi	r20, 0x7F	; 127
    2156:	57 e4       	ldi	r21, 0x47	; 71
    2158:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    215c:	18 16       	cp	r1, r24
    215e:	4c f5       	brge	.+82     	; 0x21b2 <main+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2160:	6b 85       	ldd	r22, Y+11	; 0x0b
    2162:	7c 85       	ldd	r23, Y+12	; 0x0c
    2164:	8d 85       	ldd	r24, Y+13	; 0x0d
    2166:	9e 85       	ldd	r25, Y+14	; 0x0e
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e2       	ldi	r20, 0x20	; 32
    216e:	51 e4       	ldi	r21, 0x41	; 65
    2170:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	bc 01       	movw	r22, r24
    217a:	cd 01       	movw	r24, r26
    217c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	9e 83       	std	Y+6, r25	; 0x06
    2186:	8d 83       	std	Y+5, r24	; 0x05
    2188:	0f c0       	rjmp	.+30     	; 0x21a8 <main+0x4a2>
    218a:	88 ec       	ldi	r24, 0xC8	; 200
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	9c 83       	std	Y+4, r25	; 0x04
    2190:	8b 83       	std	Y+3, r24	; 0x03
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <main+0x490>
    219a:	9c 83       	std	Y+4, r25	; 0x04
    219c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219e:	8d 81       	ldd	r24, Y+5	; 0x05
    21a0:	9e 81       	ldd	r25, Y+6	; 0x06
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	9e 83       	std	Y+6, r25	; 0x06
    21a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a8:	8d 81       	ldd	r24, Y+5	; 0x05
    21aa:	9e 81       	ldd	r25, Y+6	; 0x06
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	69 f7       	brne	.-38     	; 0x218a <main+0x484>
    21b0:	14 c0       	rjmp	.+40     	; 0x21da <main+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b2:	6f 81       	ldd	r22, Y+7	; 0x07
    21b4:	78 85       	ldd	r23, Y+8	; 0x08
    21b6:	89 85       	ldd	r24, Y+9	; 0x09
    21b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	9e 83       	std	Y+6, r25	; 0x06
    21c4:	8d 83       	std	Y+5, r24	; 0x05
    21c6:	8d 81       	ldd	r24, Y+5	; 0x05
    21c8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ca:	9a 83       	std	Y+2, r25	; 0x02
    21cc:	89 83       	std	Y+1, r24	; 0x01
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	9a 81       	ldd	r25, Y+2	; 0x02
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <main+0x4cc>
    21d6:	9a 83       	std	Y+2, r25	; 0x02
    21d8:	89 83       	std	Y+1, r24	; 0x01
    			_delay_ms(10000);
    			user_input = 255;
    21da:	8f ef       	ldi	r24, 0xFF	; 255
    21dc:	8c af       	std	Y+60, r24	; 0x3c
    21de:	1c c0       	rjmp	.+56     	; 0x2218 <main+0x512>
    			continue;
    		}

    	    home_state=1;
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	8b af       	std	Y+59, r24	; 0x3b
    		CLCD_voidClearDisplay();
    21e4:	0e 94 04 09 	call	0x1208	; 0x1208 <CLCD_voidClearDisplay>
    		CLCD_voidSendString("Welcome Sir!");
    21e8:	80 e9       	ldi	r24, 0x90	; 144
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	0e 94 be 08 	call	0x117c	; 0x117c <CLCD_voidSendString>
	    	DIO_voidSetPinValue(DIO_u8PORTD , 0 , DIO_u8LOW);
    21f0:	84 e0       	ldi	r24, 0x04	; 4
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	40 e0       	ldi	r20, 0x00	; 0
    21f6:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
	    	DIO_voidSetPinValue(DIO_u8PORTD , 1 , DIO_u8LOW);
    21fa:	84 e0       	ldi	r24, 0x04	; 4
    21fc:	61 e0       	ldi	r22, 0x01	; 1
    21fe:	40 e0       	ldi	r20, 0x00	; 0
    2200:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
	    	DIO_voidSetPinValue(DIO_u8PORTD , 2 , DIO_u8HIGH);
    2204:	84 e0       	ldi	r24, 0x04	; 4
    2206:	62 e0       	ldi	r22, 0x02	; 2
    2208:	4f ef       	ldi	r20, 0xFF	; 255
    220a:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
	    	DIO_voidSetPinValue(DIO_u8PORTD , 3 , DIO_u8HIGH);
    220e:	84 e0       	ldi	r24, 0x04	; 4
    2210:	63 e0       	ldi	r22, 0x03	; 3
    2212:	4f ef       	ldi	r20, 0xFF	; 255
    2214:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
	Servo_voidSetAngle(0);
	u8 operation = 0;
	//the unlocking mechanism
	while(1){ //the password is 123

	    while(!home_state){
    2218:	8b ad       	ldd	r24, Y+59	; 0x3b
    221a:	88 23       	and	r24, r24
    221c:	09 f4       	brne	.+2      	; 0x2220 <main+0x51a>
    221e:	a6 cd       	rjmp	.-1204   	; 0x1d6c <main+0x66>
    2220:	2f c0       	rjmp	.+94     	; 0x2280 <main+0x57a>
	    	DIO_voidSetPinValue(DIO_u8PORTD , 2 , DIO_u8HIGH);
	    	DIO_voidSetPinValue(DIO_u8PORTD , 3 , DIO_u8HIGH);
	    }
	    //After Unlocking the home
	    while(relock){
	    	home_state=0;
    2222:	1b ae       	std	Y+59, r1	; 0x3b
	    	Servo_voidSetAngle(90);
    2224:	8a e5       	ldi	r24, 0x5A	; 90
    2226:	0e 94 47 11 	call	0x228e	; 0x228e <Servo_voidSetAngle>
	    	//fan control
	    	if(DIO_u8GetPinValue(DIO_u8PORTD , 7)){
    222a:	84 e0       	ldi	r24, 0x04	; 4
    222c:	67 e0       	ldi	r22, 0x07	; 7
    222e:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_u8GetPinValue>
    2232:	88 23       	and	r24, r24
    2234:	19 f0       	breq	.+6      	; 0x223c <main+0x536>
	    		DC_MOTOR_voidRotateCW();
    2236:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <DC_MOTOR_voidRotateCW>
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <main+0x53a>
	    	}
	    	else{
	    		DC_MOTOR_voidStop();
    223c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <DC_MOTOR_voidStop>
	    	}
	    	//light control
	    	if(!DIO_u8GetPinValue(DIO_u8PORTD , 6)){
    2240:	84 e0       	ldi	r24, 0x04	; 4
    2242:	66 e0       	ldi	r22, 0x06	; 6
    2244:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_u8GetPinValue>
    2248:	88 23       	and	r24, r24
    224a:	59 f4       	brne	.+22     	; 0x2262 <main+0x55c>
		    	DIO_voidSetPinValue(DIO_u8PORTD , 2 , DIO_u8HIGH);
    224c:	84 e0       	ldi	r24, 0x04	; 4
    224e:	62 e0       	ldi	r22, 0x02	; 2
    2250:	4f ef       	ldi	r20, 0xFF	; 255
    2252:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
		    	DIO_voidSetPinValue(DIO_u8PORTD , 3 , DIO_u8HIGH);
    2256:	84 e0       	ldi	r24, 0x04	; 4
    2258:	63 e0       	ldi	r22, 0x03	; 3
    225a:	4f ef       	ldi	r20, 0xFF	; 255
    225c:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
    2260:	0a c0       	rjmp	.+20     	; 0x2276 <main+0x570>
	    	}
	    	else{
		    	DIO_voidSetPinValue(DIO_u8PORTD , 2 , DIO_u8LOW);
    2262:	84 e0       	ldi	r24, 0x04	; 4
    2264:	62 e0       	ldi	r22, 0x02	; 2
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
		    	DIO_voidSetPinValue(DIO_u8PORTD , 3 , DIO_u8LOW);
    226c:	84 e0       	ldi	r24, 0x04	; 4
    226e:	63 e0       	ldi	r22, 0x03	; 3
    2270:	40 e0       	ldi	r20, 0x00	; 0
    2272:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_voidSetPinValue>
	    	}
	    	relock=DIO_u8GetPinValue(DIO_u8PORTD , 4);
    2276:	84 e0       	ldi	r24, 0x04	; 4
    2278:	64 e0       	ldi	r22, 0x04	; 4
    227a:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_u8GetPinValue>
    227e:	8a af       	std	Y+58, r24	; 0x3a
	    	DIO_voidSetPinValue(DIO_u8PORTD , 1 , DIO_u8LOW);
	    	DIO_voidSetPinValue(DIO_u8PORTD , 2 , DIO_u8HIGH);
	    	DIO_voidSetPinValue(DIO_u8PORTD , 3 , DIO_u8HIGH);
	    }
	    //After Unlocking the home
	    while(relock){
    2280:	8a ad       	ldd	r24, Y+58	; 0x3a
    2282:	88 23       	and	r24, r24
    2284:	71 f6       	brne	.-100    	; 0x2222 <main+0x51c>
		    	DIO_voidSetPinValue(DIO_u8PORTD , 2 , DIO_u8LOW);
		    	DIO_voidSetPinValue(DIO_u8PORTD , 3 , DIO_u8LOW);
	    	}
	    	relock=DIO_u8GetPinValue(DIO_u8PORTD , 4);
	    }
	    Servo_voidSetAngle(0);
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	0e 94 47 11 	call	0x228e	; 0x228e <Servo_voidSetAngle>
    228c:	c5 cf       	rjmp	.-118    	; 0x2218 <main+0x512>

0000228e <Servo_voidSetAngle>:
	}
}
//servo motor function
void Servo_voidSetAngle(u8 Copy_u8DesiredAngle){
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	61 97       	sbiw	r28, 0x11	; 17
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	89 8b       	std	Y+17, r24	; 0x11
	u16 Time=((Copy_u8DesiredAngle*10.5))+600;
    22a4:	89 89       	ldd	r24, Y+17	; 0x11
    22a6:	88 2f       	mov	r24, r24
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	aa 27       	eor	r26, r26
    22ac:	97 fd       	sbrc	r25, 7
    22ae:	a0 95       	com	r26
    22b0:	ba 2f       	mov	r27, r26
    22b2:	bc 01       	movw	r22, r24
    22b4:	cd 01       	movw	r24, r26
    22b6:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	bc 01       	movw	r22, r24
    22c0:	cd 01       	movw	r24, r26
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	48 e2       	ldi	r20, 0x28	; 40
    22c8:	51 e4       	ldi	r21, 0x41	; 65
    22ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	bc 01       	movw	r22, r24
    22d4:	cd 01       	movw	r24, r26
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	46 e1       	ldi	r20, 0x16	; 22
    22dc:	54 e4       	ldi	r21, 0x44	; 68
    22de:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	98 8b       	std	Y+16, r25	; 0x10
    22f4:	8f 87       	std	Y+15, r24	; 0x0f
	PWM_voidSetTopValue(20000);
    22f6:	80 e2       	ldi	r24, 0x20	; 32
    22f8:	9e e4       	ldi	r25, 0x4E	; 78
    22fa:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <PWM_voidSetTopValue>
	PWM_voidSetOCRValue(Time);
    22fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2300:	98 89       	ldd	r25, Y+16	; 0x10
    2302:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <PWM_voidSetOCRValue>
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	aa ef       	ldi	r26, 0xFA	; 250
    230c:	b3 e4       	ldi	r27, 0x43	; 67
    230e:	8b 87       	std	Y+11, r24	; 0x0b
    2310:	9c 87       	std	Y+12, r25	; 0x0c
    2312:	ad 87       	std	Y+13, r26	; 0x0d
    2314:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2316:	6b 85       	ldd	r22, Y+11	; 0x0b
    2318:	7c 85       	ldd	r23, Y+12	; 0x0c
    231a:	8d 85       	ldd	r24, Y+13	; 0x0d
    231c:	9e 85       	ldd	r25, Y+14	; 0x0e
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	4a ef       	ldi	r20, 0xFA	; 250
    2324:	54 e4       	ldi	r21, 0x44	; 68
    2326:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	8f 83       	std	Y+7, r24	; 0x07
    2330:	98 87       	std	Y+8, r25	; 0x08
    2332:	a9 87       	std	Y+9, r26	; 0x09
    2334:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2336:	6f 81       	ldd	r22, Y+7	; 0x07
    2338:	78 85       	ldd	r23, Y+8	; 0x08
    233a:	89 85       	ldd	r24, Y+9	; 0x09
    233c:	9a 85       	ldd	r25, Y+10	; 0x0a
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    234a:	88 23       	and	r24, r24
    234c:	2c f4       	brge	.+10     	; 0x2358 <Servo_voidSetAngle+0xca>
		__ticks = 1;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	8d 83       	std	Y+5, r24	; 0x05
    2356:	3f c0       	rjmp	.+126    	; 0x23d6 <Servo_voidSetAngle+0x148>
	else if (__tmp > 65535)
    2358:	6f 81       	ldd	r22, Y+7	; 0x07
    235a:	78 85       	ldd	r23, Y+8	; 0x08
    235c:	89 85       	ldd	r24, Y+9	; 0x09
    235e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	3f ef       	ldi	r19, 0xFF	; 255
    2364:	4f e7       	ldi	r20, 0x7F	; 127
    2366:	57 e4       	ldi	r21, 0x47	; 71
    2368:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    236c:	18 16       	cp	r1, r24
    236e:	4c f5       	brge	.+82     	; 0x23c2 <Servo_voidSetAngle+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2370:	6b 85       	ldd	r22, Y+11	; 0x0b
    2372:	7c 85       	ldd	r23, Y+12	; 0x0c
    2374:	8d 85       	ldd	r24, Y+13	; 0x0d
    2376:	9e 85       	ldd	r25, Y+14	; 0x0e
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e2       	ldi	r20, 0x20	; 32
    237e:	51 e4       	ldi	r21, 0x41	; 65
    2380:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
    2398:	0f c0       	rjmp	.+30     	; 0x23b8 <Servo_voidSetAngle+0x12a>
    239a:	88 ec       	ldi	r24, 0xC8	; 200
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9c 83       	std	Y+4, r25	; 0x04
    23a0:	8b 83       	std	Y+3, r24	; 0x03
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	9c 81       	ldd	r25, Y+4	; 0x04
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <Servo_voidSetAngle+0x118>
    23aa:	9c 83       	std	Y+4, r25	; 0x04
    23ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ae:	8d 81       	ldd	r24, Y+5	; 0x05
    23b0:	9e 81       	ldd	r25, Y+6	; 0x06
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	9e 83       	std	Y+6, r25	; 0x06
    23b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	9e 81       	ldd	r25, Y+6	; 0x06
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	69 f7       	brne	.-38     	; 0x239a <Servo_voidSetAngle+0x10c>
    23c0:	14 c0       	rjmp	.+40     	; 0x23ea <Servo_voidSetAngle+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c2:	6f 81       	ldd	r22, Y+7	; 0x07
    23c4:	78 85       	ldd	r23, Y+8	; 0x08
    23c6:	89 85       	ldd	r24, Y+9	; 0x09
    23c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9e 83       	std	Y+6, r25	; 0x06
    23d4:	8d 83       	std	Y+5, r24	; 0x05
    23d6:	8d 81       	ldd	r24, Y+5	; 0x05
    23d8:	9e 81       	ldd	r25, Y+6	; 0x06
    23da:	9a 83       	std	Y+2, r25	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <Servo_voidSetAngle+0x154>
    23e6:	9a 83       	std	Y+2, r25	; 0x02
    23e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    23ea:	61 96       	adiw	r28, 0x11	; 17
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	08 95       	ret

000023fc <__mulsi3>:
    23fc:	62 9f       	mul	r22, r18
    23fe:	d0 01       	movw	r26, r0
    2400:	73 9f       	mul	r23, r19
    2402:	f0 01       	movw	r30, r0
    2404:	82 9f       	mul	r24, r18
    2406:	e0 0d       	add	r30, r0
    2408:	f1 1d       	adc	r31, r1
    240a:	64 9f       	mul	r22, r20
    240c:	e0 0d       	add	r30, r0
    240e:	f1 1d       	adc	r31, r1
    2410:	92 9f       	mul	r25, r18
    2412:	f0 0d       	add	r31, r0
    2414:	83 9f       	mul	r24, r19
    2416:	f0 0d       	add	r31, r0
    2418:	74 9f       	mul	r23, r20
    241a:	f0 0d       	add	r31, r0
    241c:	65 9f       	mul	r22, r21
    241e:	f0 0d       	add	r31, r0
    2420:	99 27       	eor	r25, r25
    2422:	72 9f       	mul	r23, r18
    2424:	b0 0d       	add	r27, r0
    2426:	e1 1d       	adc	r30, r1
    2428:	f9 1f       	adc	r31, r25
    242a:	63 9f       	mul	r22, r19
    242c:	b0 0d       	add	r27, r0
    242e:	e1 1d       	adc	r30, r1
    2430:	f9 1f       	adc	r31, r25
    2432:	bd 01       	movw	r22, r26
    2434:	cf 01       	movw	r24, r30
    2436:	11 24       	eor	r1, r1
    2438:	08 95       	ret

0000243a <__udivmodhi4>:
    243a:	aa 1b       	sub	r26, r26
    243c:	bb 1b       	sub	r27, r27
    243e:	51 e1       	ldi	r21, 0x11	; 17
    2440:	07 c0       	rjmp	.+14     	; 0x2450 <__udivmodhi4_ep>

00002442 <__udivmodhi4_loop>:
    2442:	aa 1f       	adc	r26, r26
    2444:	bb 1f       	adc	r27, r27
    2446:	a6 17       	cp	r26, r22
    2448:	b7 07       	cpc	r27, r23
    244a:	10 f0       	brcs	.+4      	; 0x2450 <__udivmodhi4_ep>
    244c:	a6 1b       	sub	r26, r22
    244e:	b7 0b       	sbc	r27, r23

00002450 <__udivmodhi4_ep>:
    2450:	88 1f       	adc	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	5a 95       	dec	r21
    2456:	a9 f7       	brne	.-22     	; 0x2442 <__udivmodhi4_loop>
    2458:	80 95       	com	r24
    245a:	90 95       	com	r25
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	08 95       	ret

00002462 <__prologue_saves__>:
    2462:	2f 92       	push	r2
    2464:	3f 92       	push	r3
    2466:	4f 92       	push	r4
    2468:	5f 92       	push	r5
    246a:	6f 92       	push	r6
    246c:	7f 92       	push	r7
    246e:	8f 92       	push	r8
    2470:	9f 92       	push	r9
    2472:	af 92       	push	r10
    2474:	bf 92       	push	r11
    2476:	cf 92       	push	r12
    2478:	df 92       	push	r13
    247a:	ef 92       	push	r14
    247c:	ff 92       	push	r15
    247e:	0f 93       	push	r16
    2480:	1f 93       	push	r17
    2482:	cf 93       	push	r28
    2484:	df 93       	push	r29
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	ca 1b       	sub	r28, r26
    248c:	db 0b       	sbc	r29, r27
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	f8 94       	cli
    2492:	de bf       	out	0x3e, r29	; 62
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	cd bf       	out	0x3d, r28	; 61
    2498:	09 94       	ijmp

0000249a <__epilogue_restores__>:
    249a:	2a 88       	ldd	r2, Y+18	; 0x12
    249c:	39 88       	ldd	r3, Y+17	; 0x11
    249e:	48 88       	ldd	r4, Y+16	; 0x10
    24a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    24a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    24a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    24a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    24a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    24aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    24ac:	b9 84       	ldd	r11, Y+9	; 0x09
    24ae:	c8 84       	ldd	r12, Y+8	; 0x08
    24b0:	df 80       	ldd	r13, Y+7	; 0x07
    24b2:	ee 80       	ldd	r14, Y+6	; 0x06
    24b4:	fd 80       	ldd	r15, Y+5	; 0x05
    24b6:	0c 81       	ldd	r16, Y+4	; 0x04
    24b8:	1b 81       	ldd	r17, Y+3	; 0x03
    24ba:	aa 81       	ldd	r26, Y+2	; 0x02
    24bc:	b9 81       	ldd	r27, Y+1	; 0x01
    24be:	ce 0f       	add	r28, r30
    24c0:	d1 1d       	adc	r29, r1
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	ed 01       	movw	r28, r26
    24ce:	08 95       	ret

000024d0 <_exit>:
    24d0:	f8 94       	cli

000024d2 <__stop_program>:
    24d2:	ff cf       	rjmp	.-2      	; 0x24d2 <__stop_program>
